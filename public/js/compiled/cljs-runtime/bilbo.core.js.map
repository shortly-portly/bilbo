{"version":3,"sources":["bilbo/core.cljs"],"mappings":";;;;AAMA,AAAKA,AAAU,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC;AAIhB,AAAA,AAAMC,AAAgBC;AAAtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEW,AAAA,AAAA,AAACA,AAAAA,AAAAA,AACuB,AAAA,AAAA,AAACA,AAAAA,AAAAA;;AAEpC,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEQ,AAAA,AAAA,AAAAC,AAAQL,AAEb,AAAAM,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AAk7EgD,AAAAuB,AAAA5B;AAl7EhDM,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAA,AAAAK,AAAAN,AAAAK,AAAMU;AAAN,AAAA,AAAA,AAAAR,AAAAJ,AAAA,AACMb,AAAeyB;;AADrB,AAAA,AAAAV,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAhB;;AAAA,AAAAa,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAAS,AAAAjB,AAAMoB;AAAN,AAAA,AAAAF,AAAA,AAAA,AAAAH,AAAA,AAAAI,AAAAnB,AACML,AAAeyB;;;AADrB;;;;AAAA,AAAA;;AAAA,AAAA,AAAArB,AAAW,AAAAsB,AAAA,AAAAvB,AAAEL;AAAF,AAAA,AAAA4B,AAAAA,AAAA,AAAAA,AAAA;;;;AAId,AAAA,AAAMC;AAAN,AACE,AAAA,AAACC,AAAoB1B,AACK,AAAA,AAAG2B;;AAE/B,AAAA,AAAeC;AAAf,AAIE,AAACH;;;AAEH,AAAA,AAAMI;AAAN,AAGE,AAAA,AAACC","names":["bilbo.core/app-state","reagent.core.atom","bilbo.core/note-component","content","bilbo.core/container","cljs.core/deref","iter__4529__auto__","s__28833","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__28835","cljs.core/chunk-buffer","i__28834","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__28832","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","note","fexpr__28861","bilbo.core/start","reagent.dom.render","js/document","bilbo.core/init","bilbo.core/stop","js/console.log","cljs.core/chunk-first"],"sourcesContent":["(ns bilbo.core\n  (:require [reagent.core :as reagent :refer [atom]]\n             [reagent.dom :as reagent-dom]))\n\n;; define your app data so that it doesn't get over-written on reload\n\n(def app-state (atom {:text \"Goodbye world!\"\n                      :notes [{:id 1 :creation-ts \"Sun 31/05/20\" :text \"This is note 1\"}\n                              {:id 2 :creation-ts \"Sat 30/05/20\" :text \"This is note 2\"}]}))\n\n(defn note-component [content]\n  [:div.form-group\n   [:label (content :creation-ts)]\n   [:textarea.form-control {:value (content :text)}]])\n\n(defn container []\n  [:div.container\n   [:h1 (:text @app-state)]\n   [:h4 \"Edit this and see it change!\"]\n   (for [note (@app-state :notes)]\n        [note-component note ])\n   ])\n\n(defn start []\n  (reagent-dom/render [container]\n                            (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (start))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n"]}
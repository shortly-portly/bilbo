{"version":3,"sources":["bilbo/core.cljs"],"mappings":";;;;;AAOA,AAAKA,AAAU,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC;AAIhB,AAAA,AAAMC,AAAcC;AAApB,AACE;AAAA,AACE,AAAMG,AAAU,AAACC,AAAM,AAAA,AAAA,AAAAH,AAACI,AAAcL;AAAtC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAEuBF,AACF,AAAA,AAAI,AAAA,AAAGG,AAAe,AAAA,AAAGA;AAH9C,AAK2B,AAACG,AAAON,AAAI,AAAA,AAAAE;;;;AAE3C,AAAA,AAAMK,AAAcP;AAApB,AACE;AAAA,AACE,AAAMQ,AAAG,AAAAC;AAAT,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAC2C,AAAA,AAAAR,AAAGO,AAAWR;;;AAiB7D,AAAA,AAAAU,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAA8BM;AAA9B,AAAAF,AAAAJ,AAAA,AAAmCO;AAAnC,AAAAH,AAAAJ,AAAA,AAA+CQ;AAA/C,AACE,AAAMnB,AAAQ,AAACF,AAAOmB;AAChBG,AAAQ,AAACtB,AAAOqB;AADtB,AAEE;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAE2B,AAACb,AAAOc,AAAQ,AAAA,AAAAnB,AAACoB,AAAKD;AAFjD,AAAA,AAAA,AAAA,AAIYF,AACR,AAAA,AAAAjB,AAAA,AAAA,AAAKmB,AACFrB,AAAaC,AACbO,AAAaP;;;AAExB,AAAA,AAAMsB;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEQ,AAAA,AAAA,AAAArB,AAAQJ,AAGb,AAAA0B,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AA44EgD,AAAAsB,AAAA3B;AA54EhDM,AAAA,AAAA1B,AAAAyB;AAAAE,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAH;AAAA,AAAA,AAAAI,AAAAL,AAAAI,AAAMU;AAAN,AAAA,AAAA,AAAAR,AAAAJ,AAAA,AACGf,AAAe2B;;AADlB,AAAA,AAAAV,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAf;;AAAA,AAAAY,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAAS,AAAAhB,AAAMmB;AAAN,AAAA,AAAAF,AAAA,AAAA,AAAAH,AAAA,AAAAI,AAAAlB,AACGR,AAAe2B;;;AADlB;;;;AAAA,AAAA;;AAAA,AAAA,AAAApB,AAAW,AAAAqB,AAAA,AAAA3C,AAAEJ;AAAF,AAAA,AAAA+C,AAAAA,AAAA,AAAAA,AAAA;;;;AAGd,AAAA,AAAMC;AAAN,AACE,AAAA,AAACC,AAAoBxB,AACD,AAAA,AAAGyB;;AAEzB,AAAA,AAAeC;AAAf,AAIE,AAACH;;;AAEH,AAAA,AAAMI;AAAN,AAGE,AAAA,AAACC","names":["bilbo.core/app-state","reagent.core.atom","bilbo.core/edit-content","val","cljs.core/deref","p1__37657#","row-count","cljs.core/count","cljs.core/re-seq","cljs.core/reset!","bilbo.core/show-content","md","js/module$node_modules$markdown_it$index","p__37658","map__37659","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","bilbo.core/note-component","text","creation-ts","edit","editing","cljs.core/not","bilbo.core/container","iter__4529__auto__","s__37662","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__37664","cljs.core/chunk-buffer","i__37663","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__37661","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","note","fexpr__37665","bilbo.core/start","reagent.dom.render","js/document","bilbo.core/init","bilbo.core/stop","js/console.log","cljs.core/chunk-first"],"sourcesContent":["(ns bilbo.core\n  (:require [reagent.core :as r]\n            [reagent.dom :as reagent-dom]\n            [markdown-it :as markdown-it]))\n\n;; define your app data so that it doesn't get over-written on reload\n\n(def app-state (r/atom {:text \"Goodbye world!\"\n                        :notes [{:id 1 :edit true :creation-ts \"Sun 31/05/20\" :text \"This is note 1\"}\n                                {:id 2 :edit false :creation-ts \"Sat 30/05/20\" :text \"This **is** note 2\"}]}))\n\n(defn edit-content [val]\n  (fn []\n    (let [row-count (count (re-seq #\"\\n\" @val))]\n      [:div.form-group\n       [:textarea {:value @val\n                   :rows (if (< row-count 5) 7 (+ row-count 2))\n                   :class \"form-control\"\n                   :on-change #(reset! val (-> % .-target .-value))}]])))\n\n(defn show-content [val]\n  (fn []\n    (let [md (markdown-it.)]\n      [:div {:dangerouslySetInnerHTML {:__html (. md render @val)}}])))\n\n;; (defn todo-item []\n;;   (let [editing (r/atom false)]\n;;     (fn [{:keys [id done title]}]\n;;       [:li {:class (str (if done \"completed \")\n;;                         (if @editing \"editing\"))}\n;;        [:div.view\n;;         [:input.toggle {:type \"checkbox\" :checked done\n;;                         :on-change #(toggle id)}]\n;;         [:label {:on-double-click #(reset! editing true)} title]\n;;         [:button.destroy {:on-click #(delete id)}]]\n;;        (when @editing\n;;          [todo-edit {:class \"edit\" :title title\n;;                      :on-save #(save id %)\n;;                      :on-stop #(reset! editing false)}])])))\n\n(defn note-component [{:keys [text creation-ts edit]}]\n  (let [val     (r/atom text)\n        editing (r/atom edit)]\n    (fn []\n      [:div {:class \"shadow p-3 mb-5 bg-white rounded\"\n             :on-double-click #(reset! editing (not @editing))}\n       [:div.form-group\n        [:label creation-ts]\n        (if @editing\n          [edit-content val]\n          [show-content val])]])))\n\n(defn container []\n  [:div.container\n   [:h1 (:text @app-state)]\n   [:h4 \"Edit this and see it change!\"]\n\n   (for [note (@app-state :notes)]\n     [note-component note])])\n\n(defn start []\n  (reagent-dom/render [container]\n                      (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (start))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n"]}
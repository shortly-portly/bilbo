{"version":3,"sources":["bilbo/core.cljs"],"mappings":";;;;AAMA,AAAKA,AAAU,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC;AAqBhB,AAAA,AAAAC,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAA8BM;AAA9B,AAAAF,AAAAJ,AAAA,AAAmCO;AAAnC,AACE,AAAMC,AAAI,AAACV,AAAOQ;AAAlB,AACE;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAG,AAAA,AAAA,AAAA,AAAA,AAAAC,AAGYH,AACYC;AAJxB,AAM4B,AAACG,AAAOH,AAAI,AAAA,AAAAE;;;;AAG5C,AAAA,AAAME;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEQ,AAAA,AAAA,AAAAH,AAAQZ,AAGb,AAAAgB,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AA05EgD,AAAAuB,AAAA5B;AA15EhDM,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAA,AAAAK,AAAAN,AAAAK,AAAMU;AAAN,AAAA,AAAA,AAAAR,AAAAJ,AAAA,AACGjB,AAAe6B;;AADlB,AAAA,AAAAV,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAhB;;AAAA,AAAAa,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAAS,AAAAjB,AAAMoB;AAAN,AAAA,AAAAF,AAAA,AAAA,AAAAH,AAAA,AAAAI,AAAAnB,AACGT,AAAe6B;;;AADlB;;;;AAAA,AAAA;;AAAA,AAAA,AAAArB,AAAW,AAAAsB,AAAA,AAAA1B,AAAEZ;AAAF,AAAA,AAAAsC,AAAAA,AAAA,AAAAA,AAAA;;;;AAGd,AAAA,AAAMC;AAAN,AACE,AAAA,AAACC,AAAoBzB,AACD,AAAA,AAAG0B;;AAEzB,AAAA,AAAeC;AAAf,AAIE,AAACH;;;AAEH,AAAA,AAAMI;AAAN,AAGE,AAAA,AAACC","names":["bilbo.core/app-state","reagent.core.atom","p__36913","map__36914","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","bilbo.core/note-component","text","creation-ts","val","cljs.core/deref","p1__36912#","cljs.core/reset!","bilbo.core/container","iter__4529__auto__","s__36917","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__36919","cljs.core/chunk-buffer","i__36918","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__36916","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","note","fexpr__36920","bilbo.core/start","reagent.dom.render","js/document","bilbo.core/init","bilbo.core/stop","js/console.log","cljs.core/chunk-first"],"sourcesContent":["(ns bilbo.core\n  (:require [reagent.core :as r]\n            [reagent.dom :as reagent-dom]))\n\n;; define your app data so that it doesn't get over-written on reload\n\n(def app-state (r/atom {:text \"Goodbye world!\"\n                        :notes [{:id 1 :creation-ts \"Sun 31/05/20\" :text \"This is note 1\"}\n                                {:id 2 :creation-ts \"Sat 30/05/20\" :text \"This is note 2\"}]}))\n\n;; (defn todo-input [{:keys [title on-save on-stop]}]\n;;   (let [val (r/atom title)\n;;         stop #(do (reset! val \"\")\n;;                   (if on-stop (on-stop)))\n;;         save #(let [v (-> @val str str/trim)]\n;;                 (if-not (empty? v) (on-save v))\n;;                 (stop))]\n;;     (fn [{:keys [id class placeholder]}]\n;;       [:input {:type \"text\" :value @val\n;;                :id id :class class :placeholder placeholder\n;;                :on-blur save\n;;                :on-change #(reset! val (-> % .-target .-value))\n;;                :on-key-down #(case (.-which %)\n;;                                13 (save)\n;;                                27 (stop)\n;;                                nil)}])))\n\n(defn note-component [{:keys [text creation-ts]}]\n  (let [val (r/atom text)]\n    (fn []\n      [:div {:class \"shadow p-3 mb-5 bg-white rounded\"}\n       [:div.form-group\n        [:label creation-ts]\n        [:textarea {:value @val\n                    :class \"form-control\"\n                    :on-change #(reset! val (-> % .-target .-value))}]\n        ]])))\n\n(defn container []\n  [:div.container\n   [:h1 (:text @app-state)]\n   [:h4 \"Edit this and see it change!\"]\n\n   (for [note (@app-state :notes)]\n     [note-component note])])\n\n(defn start []\n  (reagent-dom/render [container]\n                      (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (start))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n"]}
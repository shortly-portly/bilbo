{
"version":3,
"file":"module$node_modules$markdown_it$lib$rules_block$state_block.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/markdown-it/lib/rules_block/state_block.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$markdown_it$lib$rules_block$state_block\"] = function(global,require,module,exports) {\n// Parser state class\n\n'use strict';\n\nvar Token = require('../token');\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction StateBlock(src, md, env, tokens) {\n  var ch, s, start, pos, len, indent, offset, indent_found;\n\n  this.src = src;\n\n  // link to parser instance\n  this.md     = md;\n\n  this.env = env;\n\n  //\n  // Internal state vartiables\n  //\n\n  this.tokens = tokens;\n\n  this.bMarks = [];  // line begin offsets for fast jumps\n  this.eMarks = [];  // line end offsets for fast jumps\n  this.tShift = [];  // offsets of the first non-space characters (tabs not expanded)\n  this.sCount = [];  // indents for each line (tabs expanded)\n\n  // An amount of virtual spaces (tabs expanded) between beginning\n  // of each line (bMarks) and real beginning of that line.\n  //\n  // It exists only as a hack because blockquotes override bMarks\n  // losing information in the process.\n  //\n  // It's used only when expanding tabs, you can think about it as\n  // an initial tab length, e.g. bsCount=21 applied to string `\\t123`\n  // means first tab should be expanded to 4-21%4 === 3 spaces.\n  //\n  this.bsCount = [];\n\n  // block parser variables\n  this.blkIndent  = 0; // required block content indent (for example, if we are\n                       // inside a list, it would be positioned after list marker)\n  this.line       = 0; // line index in src\n  this.lineMax    = 0; // lines count\n  this.tight      = false;  // loose/tight mode for lists\n  this.ddIndent   = -1; // indent of the current dd block (-1 if there isn't any)\n  this.listIndent = -1; // indent of the current list block (-1 if there isn't any)\n\n  // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'\n  // used in lists to determine if they interrupt a paragraph\n  this.parentType = 'root';\n\n  this.level = 0;\n\n  // renderer\n  this.result = '';\n\n  // Create caches\n  // Generate markers.\n  s = this.src;\n  indent_found = false;\n\n  for (start = pos = indent = offset = 0, len = s.length; pos < len; pos++) {\n    ch = s.charCodeAt(pos);\n\n    if (!indent_found) {\n      if (isSpace(ch)) {\n        indent++;\n\n        if (ch === 0x09) {\n          offset += 4 - offset % 4;\n        } else {\n          offset++;\n        }\n        continue;\n      } else {\n        indent_found = true;\n      }\n    }\n\n    if (ch === 0x0A || pos === len - 1) {\n      if (ch !== 0x0A) { pos++; }\n      this.bMarks.push(start);\n      this.eMarks.push(pos);\n      this.tShift.push(indent);\n      this.sCount.push(offset);\n      this.bsCount.push(0);\n\n      indent_found = false;\n      indent = 0;\n      offset = 0;\n      start = pos + 1;\n    }\n  }\n\n  // Push fake entry to simplify cache bounds checks\n  this.bMarks.push(s.length);\n  this.eMarks.push(s.length);\n  this.tShift.push(0);\n  this.sCount.push(0);\n  this.bsCount.push(0);\n\n  this.lineMax = this.bMarks.length - 1; // don't count last fake line\n}\n\n// Push new token to \"stream\".\n//\nStateBlock.prototype.push = function (type, tag, nesting) {\n  var token = new Token(type, tag, nesting);\n  token.block = true;\n\n  if (nesting < 0) this.level--; // closing tag\n  token.level = this.level;\n  if (nesting > 0) this.level++; // opening tag\n\n  this.tokens.push(token);\n  return token;\n};\n\nStateBlock.prototype.isEmpty = function isEmpty(line) {\n  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n};\n\nStateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n  for (var max = this.lineMax; from < max; from++) {\n    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n      break;\n    }\n  }\n  return from;\n};\n\n// Skip spaces from given position.\nStateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n  var ch;\n\n  for (var max = this.src.length; pos < max; pos++) {\n    ch = this.src.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n  }\n  return pos;\n};\n\n// Skip spaces from given position in reverse.\nStateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (!isSpace(this.src.charCodeAt(--pos))) { return pos + 1; }\n  }\n  return pos;\n};\n\n// Skip char codes from given position\nStateBlock.prototype.skipChars = function skipChars(pos, code) {\n  for (var max = this.src.length; pos < max; pos++) {\n    if (this.src.charCodeAt(pos) !== code) { break; }\n  }\n  return pos;\n};\n\n// Skip char codes reverse from given position - 1\nStateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (code !== this.src.charCodeAt(--pos)) { return pos + 1; }\n  }\n  return pos;\n};\n\n// cut lines range from source.\nStateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n  var i, lineIndent, ch, first, last, queue, lineStart,\n      line = begin;\n\n  if (begin >= end) {\n    return '';\n  }\n\n  queue = new Array(end - begin);\n\n  for (i = 0; line < end; line++, i++) {\n    lineIndent = 0;\n    lineStart = first = this.bMarks[line];\n\n    if (line + 1 < end || keepLastLF) {\n      // No need for bounds check because we have fake entry on tail.\n      last = this.eMarks[line] + 1;\n    } else {\n      last = this.eMarks[line];\n    }\n\n    while (first < last && lineIndent < indent) {\n      ch = this.src.charCodeAt(first);\n\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;\n        } else {\n          lineIndent++;\n        }\n      } else if (first - lineStart < this.tShift[line]) {\n        // patched tShift masked characters to look like spaces (blockquotes, list markers)\n        lineIndent++;\n      } else {\n        break;\n      }\n\n      first++;\n    }\n\n    if (lineIndent > indent) {\n      // partially expanding tabs in code blocks, e.g '\\t\\tfoobar'\n      // with indent=2 becomes '  \\tfoobar'\n      queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);\n    } else {\n      queue[i] = this.src.slice(first, last);\n    }\n  }\n\n  return queue.join('');\n};\n\n// re-export Token class to use in block rules\nStateBlock.prototype.Token = Token;\n\n\nmodule.exports = StateBlock;\n\n};"],
"names":["shadow$provide","global","require","module","exports","StateBlock","src","md","env","tokens","len","indent","offset","bMarks","eMarks","tShift","sCount","bsCount","lineMax","line","blkIndent","tight","listIndent","ddIndent","parentType","level","result","s","indent_found","start","pos","length","ch","charCodeAt","isSpace","push","Token","prototype","StateBlock.prototype.push","type","tag","nesting","token","block","isEmpty","StateBlock.prototype.isEmpty","skipEmptyLines","StateBlock.prototype.skipEmptyLines","from","max","skipSpaces","StateBlock.prototype.skipSpaces","skipSpacesBack","StateBlock.prototype.skipSpacesBack","min","skipChars","StateBlock.prototype.skipChars","code","skipCharsBack","StateBlock.prototype.skipCharsBack","getLines","StateBlock.prototype.getLines","begin","end","keepLastLF","first","last","queue","Array","i","lineIndent","lineStart","join","slice"]
}

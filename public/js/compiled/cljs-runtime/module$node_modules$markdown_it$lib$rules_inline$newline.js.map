{
"version":3,
"file":"module$node_modules$markdown_it$lib$rules_inline$newline.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,yDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAKrH,IAAIC,QAAUH,OAAA,CAAQ,kDAAR,CAAAG,QAGdF,OAAAC,QAAA,CAAiBE,QAAgB,CAACC,KAAD,CAAQC,MAAR,CAAgB,CAAA,IAChCC,IAAMF,KAAAE,IAErB,IAAkC,EAAlC,GAAIF,KAAAG,IAAAC,WAAA,CAAqBF,GAArB,CAAJ,CAAkD,MAAO,CAAA,CAEzD,KAAAG,KAAOL,KAAAM,QAAAC,OAAPF,CAA8B,CAC9B,KAAAG,IAAMR,KAAAS,OAMDR,OAAL,GACc,CAAZ,EAAII,IAAJ,EAAoD,EAApD,GAAiBL,KAAAM,QAAAF,WAAA,CAAyBC,IAAzB,CAAjB,CACc,CAAZ,EAAIA,IAAJ,EAAwD,EAAxD,GAAiBL,KAAAM,QAAAF,WAAA,CAAyBC,IAAzB,CAAgC,CAAhC,CAAjB,EACEL,KAAAM,QACA,CADgBN,KAAAM,QAAAI,QAAA,CAAsB,KAAtB,CAA6B,EAA7B,CAChB,CAAAV,KAAAW,KAAA,CAAW,WAAX;AAAwB,IAAxB,CAA8B,CAA9B,CAFF,GAIEX,KAAAM,QACA,CADgBN,KAAAM,QAAAM,MAAA,CAAoB,CAApB,CAAuB,EAAvB,CAChB,CAAAZ,KAAAW,KAAA,CAAW,WAAX,CAAwB,IAAxB,CAA8B,CAA9B,CALF,CADF,CAUEX,KAAAW,KAAA,CAAW,WAAX,CAAwB,IAAxB,CAA8B,CAA9B,CAXJ,CAkBA,KAHAT,GAAA,EAGA,CAAOA,GAAP,CAAaM,GAAb,EAAoBV,OAAA,CAAQE,KAAAG,IAAAC,WAAA,CAAqBF,GAArB,CAAR,CAApB,CAAA,CAA0DA,GAAA,EAE1DF,MAAAE,IAAA,CAAYA,GACZ,OAAO,CAAA,CAjCwC,CARoE;",
"sources":["node_modules/markdown-it/lib/rules_inline/newline.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$markdown_it$lib$rules_inline$newline\"] = function(global,require,module,exports) {\n// Proceess '\\n'\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function newline(state, silent) {\n  var pmax, max, pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x0A/* \\n */) { return false; }\n\n  pmax = state.pending.length - 1;\n  max = state.posMax;\n\n  // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        state.pending = state.pending.replace(/ +$/, '');\n        state.push('hardbreak', 'br', 0);\n      } else {\n        state.pending = state.pending.slice(0, -1);\n        state.push('softbreak', 'br', 0);\n      }\n\n    } else {\n      state.push('softbreak', 'br', 0);\n    }\n  }\n\n  pos++;\n\n  // skip heading spaces for next line\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++; }\n\n  state.pos = pos;\n  return true;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","isSpace","module.exports","state","silent","pos","src","charCodeAt","pmax","pending","length","max","posMax","replace","push","slice"]
}

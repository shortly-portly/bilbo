{
"version":3,
"file":"module$node_modules$markdown_it$lib$renderer.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/markdown-it/lib/renderer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$markdown_it$lib$renderer\"] = function(global,require,module,exports) {\n/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/\n'use strict';\n\n\nvar assign          = require('./common/utils').assign;\nvar unescapeAll     = require('./common/utils').unescapeAll;\nvar escapeHtml      = require('./common/utils').escapeHtml;\n\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar default_rules = {};\n\n\ndefault_rules.code_inline = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<code' + slf.renderAttrs(token) + '>' +\n          escapeHtml(tokens[idx].content) +\n          '</code>';\n};\n\n\ndefault_rules.code_block = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<pre' + slf.renderAttrs(token) + '><code>' +\n          escapeHtml(tokens[idx].content) +\n          '</code></pre>\\n';\n};\n\n\ndefault_rules.fence = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx],\n      info = token.info ? unescapeAll(token.info).trim() : '',\n      langName = '',\n      highlighted, i, tmpAttrs, tmpToken;\n\n  if (info) {\n    langName = info.split(/\\s+/g)[0];\n  }\n\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName) || escapeHtml(token.content);\n  } else {\n    highlighted = escapeHtml(token.content);\n  }\n\n  if (highlighted.indexOf('<pre') === 0) {\n    return highlighted + '\\n';\n  }\n\n  // If language exists, inject class gently, without modifying original token.\n  // May be, one day we will add .clone() for token and simplify this part, but\n  // now we prefer to keep things local.\n  if (info) {\n    i        = token.attrIndex('class');\n    tmpAttrs = token.attrs ? token.attrs.slice() : [];\n\n    if (i < 0) {\n      tmpAttrs.push([ 'class', options.langPrefix + langName ]);\n    } else {\n      tmpAttrs[i][1] += ' ' + options.langPrefix + langName;\n    }\n\n    // Fake token just to render attributes\n    tmpToken = {\n      attrs: tmpAttrs\n    };\n\n    return  '<pre><code' + slf.renderAttrs(tmpToken) + '>'\n          + highlighted\n          + '</code></pre>\\n';\n  }\n\n\n  return  '<pre><code' + slf.renderAttrs(token) + '>'\n        + highlighted\n        + '</code></pre>\\n';\n};\n\n\ndefault_rules.image = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n  // should be placed on proper position for tests.\n  //\n  // Replace content with actual value\n\n  token.attrs[token.attrIndex('alt')][1] =\n    slf.renderInlineAsText(token.children, options, env);\n\n  return slf.renderToken(tokens, idx, options);\n};\n\n\ndefault_rules.hardbreak = function (tokens, idx, options /*, env */) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n';\n};\ndefault_rules.softbreak = function (tokens, idx, options /*, env */) {\n  return options.breaks ? (options.xhtmlOut ? '<br />\\n' : '<br>\\n') : '\\n';\n};\n\n\ndefault_rules.text = function (tokens, idx /*, options, env */) {\n  return escapeHtml(tokens[idx].content);\n};\n\n\ndefault_rules.html_block = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\ndefault_rules.html_inline = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\n\n\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/\nfunction Renderer() {\n\n  /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)\n   * for more details and examples.\n   **/\n  this.rules = assign({}, default_rules);\n}\n\n\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/\nRenderer.prototype.renderAttrs = function renderAttrs(token) {\n  var i, l, result;\n\n  if (!token.attrs) { return ''; }\n\n  result = '';\n\n  for (i = 0, l = token.attrs.length; i < l; i++) {\n    result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"';\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/\nRenderer.prototype.renderToken = function renderToken(tokens, idx, options) {\n  var nextToken,\n      result = '',\n      needLf = false,\n      token = tokens[idx];\n\n  // Tight list paragraphs\n  if (token.hidden) {\n    return '';\n  }\n\n  // Insert a newline between hidden paragraph and subsequent opening\n  // block-level tag.\n  //\n  // For example, here we should insert a newline before blockquote:\n  //  - a\n  //    >\n  //\n  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n    result += '\\n';\n  }\n\n  // Add token name, e.g. `<img`\n  result += (token.nesting === -1 ? '</' : '<') + token.tag;\n\n  // Encode attributes, e.g. `<img src=\"foo\"`\n  result += this.renderAttrs(token);\n\n  // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n  if (token.nesting === 0 && options.xhtmlOut) {\n    result += ' /';\n  }\n\n  // Check if we need to add a newline after this tag\n  if (token.block) {\n    needLf = true;\n\n    if (token.nesting === 1) {\n      if (idx + 1 < tokens.length) {\n        nextToken = tokens[idx + 1];\n\n        if (nextToken.type === 'inline' || nextToken.hidden) {\n          // Block-level tag containing an inline tag.\n          //\n          needLf = false;\n\n        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n          // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n          //\n          needLf = false;\n        }\n      }\n    }\n  }\n\n  result += needLf ? '>\\n' : '>';\n\n  return result;\n};\n\n\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to renter\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  var type,\n      result = '',\n      rules = this.rules;\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options);\n    }\n  }\n\n  return result;\n};\n\n\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to renter\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/\nRenderer.prototype.renderInlineAsText = function (tokens, options, env) {\n  var result = '';\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    if (tokens[i].type === 'text') {\n      result += tokens[i].content;\n    } else if (tokens[i].type === 'image') {\n      result += this.renderInlineAsText(tokens[i].children, options, env);\n    }\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to renter\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/\nRenderer.prototype.render = function (tokens, options, env) {\n  var i, len, type,\n      result = '',\n      rules = this.rules;\n\n  for (i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env);\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[tokens[i].type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options, env);\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = Renderer;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Renderer","rules","assign","default_rules","unescapeAll","escapeHtml","default_rules.code_inline","tokens","idx","options","env","slf","renderAttrs","token","content","default_rules.code_block","default_rules.fence","info","trim","langName","split","highlighted","highlight","indexOf","i","attrIndex","tmpAttrs","attrs","slice","push","langPrefix","tmpToken","default_rules.image","renderInlineAsText","children","renderToken","default_rules.hardbreak","xhtmlOut","default_rules.softbreak","breaks","default_rules.text","default_rules.html_block","default_rules.html_inline","prototype","Renderer.prototype.renderAttrs","l","result","length","Renderer.prototype.renderToken","needLf","hidden","block","nesting","tag","nextToken","type","renderInline","Renderer.prototype.renderInline","len","Renderer.prototype.renderInlineAsText","render","Renderer.prototype.render"]
}

["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/markdown-it/lib/rules_block/table.js"],"~:js","shadow$provide.module$node_modules$markdown_it$lib$rules_block$table=function(global,require,module,exports){function getLine(state,line){var pos=state.bMarks[line]+state.blkIndent;return state.src.substr(pos,state.eMarks[line]-pos)}function escapedSplit(str){var result=[],pos=0,max=str.length,ch,escapes=0,lastPos=0,backTicked=!1,lastBackTick=0;for(ch=str.charCodeAt(pos);pos<max;)96===ch?backTicked?(backTicked=!1,lastBackTick=pos):0===escapes%2&&(backTicked=!0,lastBackTick=pos):124!==ch||0!==escapes%\n2||backTicked||(result.push(str.substring(lastPos,pos)),lastPos=pos+1),92===ch?escapes++:escapes=0,pos++,pos===max&&backTicked&&(backTicked=!1,pos=lastBackTick+1),ch=str.charCodeAt(pos);result.push(str.substring(lastPos));return result}var isSpace=require(\"module$node_modules$markdown_it$lib$common$utils\").isSpace;module.exports=function(state,startLine,endLine,silent){var tbodyLines;if(startLine+2>endLine)return!1;var nextLine=startLine+1;if(state.sCount[nextLine]<state.blkIndent||4<=state.sCount[nextLine]-\nstate.blkIndent)return!1;var lineText=state.bMarks[nextLine]+state.tShift[nextLine];if(lineText>=state.eMarks[nextLine])return!1;var ch=state.src.charCodeAt(lineText++);if(124!==ch&&45!==ch&&58!==ch)return!1;for(;lineText<state.eMarks[nextLine];){ch=state.src.charCodeAt(lineText);if(124!==ch&&45!==ch&&58!==ch&&!isSpace(ch))return!1;lineText++}lineText=getLine(state,startLine+1);var columns=lineText.split(\"|\");ch=[];for(lineText=0;lineText<columns.length;lineText++){nextLine=columns[lineText].trim();\nif(!nextLine)if(0===lineText||lineText===columns.length-1)continue;else return!1;if(!/^:?-+:?$/.test(nextLine))return!1;58===nextLine.charCodeAt(nextLine.length-1)?ch.push(58===nextLine.charCodeAt(0)?\"center\":\"right\"):58===nextLine.charCodeAt(0)?ch.push(\"left\"):ch.push(\"\")}lineText=getLine(state,startLine).trim();if(-1===lineText.indexOf(\"|\")||4<=state.sCount[startLine]-state.blkIndent)return!1;columns=escapedSplit(lineText.replace(/^\\||\\|$/g,\"\"));var columnCount=columns.length;if(columnCount>ch.length)return!1;\nif(silent)return!0;var token=state.push(\"table_open\",\"table\",1);token.map=silent=[startLine,0];token=state.push(\"thead_open\",\"thead\",1);token.map=[startLine,startLine+1];token=state.push(\"tr_open\",\"tr\",1);token.map=[startLine,startLine+1];for(lineText=0;lineText<columns.length;lineText++)token=state.push(\"th_open\",\"th\",1),token.map=[startLine,startLine+1],ch[lineText]&&(token.attrs=[[\"style\",\"text-align:\"+ch[lineText]]]),token=state.push(\"inline\",\"\",0),token.content=columns[lineText].trim(),token.map=\n[startLine,startLine+1],token.children=[],state.push(\"th_close\",\"th\",-1);state.push(\"tr_close\",\"tr\",-1);state.push(\"thead_close\",\"thead\",-1);token=state.push(\"tbody_open\",\"tbody\",1);token.map=tbodyLines=[startLine+2,0];for(nextLine=startLine+2;nextLine<endLine&&!(state.sCount[nextLine]<state.blkIndent);nextLine++){lineText=getLine(state,nextLine).trim();if(-1===lineText.indexOf(\"|\"))break;if(4<=state.sCount[nextLine]-state.blkIndent)break;columns=escapedSplit(lineText.replace(/^\\||\\|$/g,\"\"));state.push(\"tr_open\",\n\"tr\",1);for(lineText=0;lineText<columnCount;lineText++)token=state.push(\"td_open\",\"td\",1),ch[lineText]&&(token.attrs=[[\"style\",\"text-align:\"+ch[lineText]]]),token=state.push(\"inline\",\"\",0),token.content=columns[lineText]?columns[lineText].trim():\"\",token.children=[],state.push(\"td_close\",\"td\",-1);state.push(\"tr_close\",\"tr\",-1)}state.push(\"tbody_close\",\"tbody\",-1);state.push(\"table_close\",\"table\",-1);silent[1]=tbodyLines[1]=nextLine;state.line=nextLine;return!0}}","~:source","shadow$provide[\"module$node_modules$markdown_it$lib$rules_block$table\"] = function(global,require,module,exports) {\n// GFM table, non-standard\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction getLine(state, line) {\n  var pos = state.bMarks[line] + state.blkIndent,\n      max = state.eMarks[line];\n\n  return state.src.substr(pos, max - pos);\n}\n\nfunction escapedSplit(str) {\n  var result = [],\n      pos = 0,\n      max = str.length,\n      ch,\n      escapes = 0,\n      lastPos = 0,\n      backTicked = false,\n      lastBackTick = 0;\n\n  ch  = str.charCodeAt(pos);\n\n  while (pos < max) {\n    if (ch === 0x60/* ` */) {\n      if (backTicked) {\n        // make \\` close code sequence, but not open it;\n        // the reason is: `\\` is correct code block\n        backTicked = false;\n        lastBackTick = pos;\n      } else if (escapes % 2 === 0) {\n        backTicked = true;\n        lastBackTick = pos;\n      }\n    } else if (ch === 0x7c/* | */ && (escapes % 2 === 0) && !backTicked) {\n      result.push(str.substring(lastPos, pos));\n      lastPos = pos + 1;\n    }\n\n    if (ch === 0x5c/* \\ */) {\n      escapes++;\n    } else {\n      escapes = 0;\n    }\n\n    pos++;\n\n    // If there was an un-closed backtick, go back to just after\n    // the last backtick, but as if it was a normal character\n    if (pos === max && backTicked) {\n      backTicked = false;\n      pos = lastBackTick + 1;\n    }\n\n    ch = str.charCodeAt(pos);\n  }\n\n  result.push(str.substring(lastPos));\n\n  return result;\n}\n\n\nmodule.exports = function table(state, startLine, endLine, silent) {\n  var ch, lineText, pos, i, nextLine, columns, columnCount, token,\n      aligns, t, tableLines, tbodyLines;\n\n  // should have at least two lines\n  if (startLine + 2 > endLine) { return false; }\n\n  nextLine = startLine + 1;\n\n  if (state.sCount[nextLine] < state.blkIndent) { return false; }\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false; }\n\n  // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  ch = state.src.charCodeAt(pos++);\n  if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */) { return false; }\n\n  while (pos < state.eMarks[nextLine]) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false; }\n\n    pos++;\n  }\n\n  lineText = getLine(state, startLine + 1);\n\n  columns = lineText.split('|');\n  aligns = [];\n  for (i = 0; i < columns.length; i++) {\n    t = columns[i].trim();\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) { return false; }\n    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');\n    } else if (t.charCodeAt(0) === 0x3A/* : */) {\n      aligns.push('left');\n    } else {\n      aligns.push('');\n    }\n  }\n\n  lineText = getLine(state, startLine).trim();\n  if (lineText.indexOf('|') === -1) { return false; }\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n  columns = escapedSplit(lineText.replace(/^\\||\\|$/g, ''));\n\n  // header row will define an amount of columns in the entire table,\n  // and align row shouldn't be smaller than that (the rest of the rows can)\n  columnCount = columns.length;\n  if (columnCount > aligns.length) { return false; }\n\n  if (silent) { return true; }\n\n  token     = state.push('table_open', 'table', 1);\n  token.map = tableLines = [ startLine, 0 ];\n\n  token     = state.push('thead_open', 'thead', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  token     = state.push('tr_open', 'tr', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  for (i = 0; i < columns.length; i++) {\n    token          = state.push('th_open', 'th', 1);\n    token.map      = [ startLine, startLine + 1 ];\n    if (aligns[i]) {\n      token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n    }\n\n    token          = state.push('inline', '', 0);\n    token.content  = columns[i].trim();\n    token.map      = [ startLine, startLine + 1 ];\n    token.children = [];\n\n    token          = state.push('th_close', 'th', -1);\n  }\n\n  token     = state.push('tr_close', 'tr', -1);\n  token     = state.push('thead_close', 'thead', -1);\n\n  token     = state.push('tbody_open', 'tbody', 1);\n  token.map = tbodyLines = [ startLine + 2, 0 ];\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    lineText = getLine(state, nextLine).trim();\n    if (lineText.indexOf('|') === -1) { break; }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break; }\n    columns = escapedSplit(lineText.replace(/^\\||\\|$/g, ''));\n\n    token = state.push('tr_open', 'tr', 1);\n    for (i = 0; i < columnCount; i++) {\n      token          = state.push('td_open', 'td', 1);\n      if (aligns[i]) {\n        token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n      }\n\n      token          = state.push('inline', '', 0);\n      token.content  = columns[i] ? columns[i].trim() : '';\n      token.children = [];\n\n      token          = state.push('td_close', 'td', -1);\n    }\n    token = state.push('tr_close', 'tr', -1);\n  }\n  token = state.push('tbody_close', 'tbody', -1);\n  token = state.push('table_close', 'table', -1);\n\n  tableLines[1] = tbodyLines[1] = nextLine;\n  state.line = nextLine;\n  return true;\n};\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$markdown_it$lib$common$utils"]],"~:properties",["^5",["map","attrs","children","content","line"]],"~:compiled-at",1591107371170,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$markdown_it$lib$rules_block$table.js\",\n\"lineCount\":7,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/markdown-it/lib/rules_block/table.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$markdown_it$lib$rules_block$table\\\"] = function(global,require,module,exports) {\\n// GFM table, non-standard\\n\\n'use strict';\\n\\nvar isSpace = require('../common/utils').isSpace;\\n\\n\\nfunction getLine(state, line) {\\n  var pos = state.bMarks[line] + state.blkIndent,\\n      max = state.eMarks[line];\\n\\n  return state.src.substr(pos, max - pos);\\n}\\n\\nfunction escapedSplit(str) {\\n  var result = [],\\n      pos = 0,\\n      max = str.length,\\n      ch,\\n      escapes = 0,\\n      lastPos = 0,\\n      backTicked = false,\\n      lastBackTick = 0;\\n\\n  ch  = str.charCodeAt(pos);\\n\\n  while (pos < max) {\\n    if (ch === 0x60/* ` */) {\\n      if (backTicked) {\\n        // make \\\\` close code sequence, but not open it;\\n        // the reason is: `\\\\` is correct code block\\n        backTicked = false;\\n        lastBackTick = pos;\\n      } else if (escapes % 2 === 0) {\\n        backTicked = true;\\n        lastBackTick = pos;\\n      }\\n    } else if (ch === 0x7c/* | */ && (escapes % 2 === 0) && !backTicked) {\\n      result.push(str.substring(lastPos, pos));\\n      lastPos = pos + 1;\\n    }\\n\\n    if (ch === 0x5c/* \\\\ */) {\\n      escapes++;\\n    } else {\\n      escapes = 0;\\n    }\\n\\n    pos++;\\n\\n    // If there was an un-closed backtick, go back to just after\\n    // the last backtick, but as if it was a normal character\\n    if (pos === max && backTicked) {\\n      backTicked = false;\\n      pos = lastBackTick + 1;\\n    }\\n\\n    ch = str.charCodeAt(pos);\\n  }\\n\\n  result.push(str.substring(lastPos));\\n\\n  return result;\\n}\\n\\n\\nmodule.exports = function table(state, startLine, endLine, silent) {\\n  var ch, lineText, pos, i, nextLine, columns, columnCount, token,\\n      aligns, t, tableLines, tbodyLines;\\n\\n  // should have at least two lines\\n  if (startLine + 2 > endLine) { return false; }\\n\\n  nextLine = startLine + 1;\\n\\n  if (state.sCount[nextLine] < state.blkIndent) { return false; }\\n\\n  // if it's indented more than 3 spaces, it should be a code block\\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false; }\\n\\n  // first character of the second line should be '|', '-', ':',\\n  // and no other characters are allowed but spaces;\\n  // basically, this is the equivalent of /^[-:|][-:|\\\\s]*$/ regexp\\n\\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\\n  if (pos >= state.eMarks[nextLine]) { return false; }\\n\\n  ch = state.src.charCodeAt(pos++);\\n  if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */) { return false; }\\n\\n  while (pos < state.eMarks[nextLine]) {\\n    ch = state.src.charCodeAt(pos);\\n\\n    if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false; }\\n\\n    pos++;\\n  }\\n\\n  lineText = getLine(state, startLine + 1);\\n\\n  columns = lineText.split('|');\\n  aligns = [];\\n  for (i = 0; i < columns.length; i++) {\\n    t = columns[i].trim();\\n    if (!t) {\\n      // allow empty columns before and after table, but not in between columns;\\n      // e.g. allow ` |---| `, disallow ` ---||--- `\\n      if (i === 0 || i === columns.length - 1) {\\n        continue;\\n      } else {\\n        return false;\\n      }\\n    }\\n\\n    if (!/^:?-+:?$/.test(t)) { return false; }\\n    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {\\n      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');\\n    } else if (t.charCodeAt(0) === 0x3A/* : */) {\\n      aligns.push('left');\\n    } else {\\n      aligns.push('');\\n    }\\n  }\\n\\n  lineText = getLine(state, startLine).trim();\\n  if (lineText.indexOf('|') === -1) { return false; }\\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\\n  columns = escapedSplit(lineText.replace(/^\\\\||\\\\|$/g, ''));\\n\\n  // header row will define an amount of columns in the entire table,\\n  // and align row shouldn't be smaller than that (the rest of the rows can)\\n  columnCount = columns.length;\\n  if (columnCount > aligns.length) { return false; }\\n\\n  if (silent) { return true; }\\n\\n  token     = state.push('table_open', 'table', 1);\\n  token.map = tableLines = [ startLine, 0 ];\\n\\n  token     = state.push('thead_open', 'thead', 1);\\n  token.map = [ startLine, startLine + 1 ];\\n\\n  token     = state.push('tr_open', 'tr', 1);\\n  token.map = [ startLine, startLine + 1 ];\\n\\n  for (i = 0; i < columns.length; i++) {\\n    token          = state.push('th_open', 'th', 1);\\n    token.map      = [ startLine, startLine + 1 ];\\n    if (aligns[i]) {\\n      token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\\n    }\\n\\n    token          = state.push('inline', '', 0);\\n    token.content  = columns[i].trim();\\n    token.map      = [ startLine, startLine + 1 ];\\n    token.children = [];\\n\\n    token          = state.push('th_close', 'th', -1);\\n  }\\n\\n  token     = state.push('tr_close', 'tr', -1);\\n  token     = state.push('thead_close', 'thead', -1);\\n\\n  token     = state.push('tbody_open', 'tbody', 1);\\n  token.map = tbodyLines = [ startLine + 2, 0 ];\\n\\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\\n\\n    lineText = getLine(state, nextLine).trim();\\n    if (lineText.indexOf('|') === -1) { break; }\\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break; }\\n    columns = escapedSplit(lineText.replace(/^\\\\||\\\\|$/g, ''));\\n\\n    token = state.push('tr_open', 'tr', 1);\\n    for (i = 0; i < columnCount; i++) {\\n      token          = state.push('td_open', 'td', 1);\\n      if (aligns[i]) {\\n        token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\\n      }\\n\\n      token          = state.push('inline', '', 0);\\n      token.content  = columns[i] ? columns[i].trim() : '';\\n      token.children = [];\\n\\n      token          = state.push('td_close', 'td', -1);\\n    }\\n    token = state.push('tr_close', 'tr', -1);\\n  }\\n  token = state.push('tbody_close', 'tbody', -1);\\n  token = state.push('table_close', 'table', -1);\\n\\n  tableLines[1] = tbodyLines[1] = nextLine;\\n  state.line = nextLine;\\n  return true;\\n};\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"getLine\",\"state\",\"line\",\"pos\",\"bMarks\",\"blkIndent\",\"src\",\"substr\",\"eMarks\",\"max\",\"escapedSplit\",\"str\",\"result\",\"length\",\"ch\",\"escapes\",\"lastPos\",\"backTicked\",\"lastBackTick\",\"charCodeAt\",\"push\",\"substring\",\"isSpace\",\"module.exports\",\"startLine\",\"endLine\",\"silent\",\"tbodyLines\",\"nextLine\",\"sCount\",\"tShift\",\"lineText\",\"columns\",\"split\",\"aligns\",\"i\",\"t\",\"trim\",\"test\",\"indexOf\",\"replace\",\"columnCount\",\"token\",\"map\",\"tableLines\",\"attrs\",\"content\",\"children\"]\n}\n"]
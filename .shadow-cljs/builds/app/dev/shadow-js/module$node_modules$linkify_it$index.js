["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/linkify-it/index.js"],"~:js","shadow$provide.module$node_modules$linkify_it$index=function(global,require,module,exports){function assign(obj){Array.prototype.slice.call(arguments,1).forEach(function(source){source&&Object.keys(source).forEach(function(key){obj[key]=source[key]})});return obj}function _class(obj){return Object.prototype.toString.call(obj)}function escapeRE(str){return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g,\"\\\\$\\x26\")}function isOptionsObj(obj){return Object.keys(obj||{}).reduce(function(acc,k){return acc||defaultOptions.hasOwnProperty(k)},\n!1)}function resetScanCache(self){self.__index__=-1;self.__text_cache__=\"\"}function createValidator(re){return function(text,pos){text=text.slice(pos);return re.test(text)?text.match(re)[0].length:0}}function createNormalizer(){return function(match,self){self.normalize(match)}}function compile(self){function untpl(tpl){return tpl.replace(\"%TLDS%\",re.src_tlds)}function schemaError(name,val){throw Error('(LinkifyIt) Invalid schema \"'+name+'\": '+val);}var re=self.re=require(\"module$node_modules$linkify_it$lib$re\")(self.__opts__),\ntlds=self.__tlds__.slice();self.onCompile();self.__tlds_replaced__||tlds.push(\"a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]\");tlds.push(re.src_xn);re.src_tlds=tlds.join(\"|\");re.email_fuzzy=RegExp(untpl(re.tpl_email_fuzzy),\n\"i\");re.link_fuzzy=RegExp(untpl(re.tpl_link_fuzzy),\"i\");re.link_no_ip_fuzzy=RegExp(untpl(re.tpl_link_no_ip_fuzzy),\"i\");re.host_fuzzy_test=RegExp(untpl(re.tpl_host_fuzzy_test),\"i\");var aliases=[];self.__compiled__={};Object.keys(self.__schemas__).forEach(function(name){var val=self.__schemas__[name];if(null!==val){var compiled={validate:null,link:null};self.__compiled__[name]=compiled;\"[object Object]\"===_class(val)?(\"[object RegExp]\"===_class(val.validate)?compiled.validate=createValidator(val.validate):\n\"[object Function]\"===_class(val.validate)?compiled.validate=val.validate:schemaError(name,val),\"[object Function]\"===_class(val.normalize)?compiled.normalize=val.normalize:val.normalize?schemaError(name,val):compiled.normalize=createNormalizer()):\"[object String]\"===_class(val)?aliases.push(name):schemaError(name,val)}});aliases.forEach(function(alias){self.__compiled__[self.__schemas__[alias]]&&(self.__compiled__[alias].validate=self.__compiled__[self.__schemas__[alias]].validate,self.__compiled__[alias].normalize=\nself.__compiled__[self.__schemas__[alias]].normalize)});self.__compiled__[\"\"]={validate:null,normalize:createNormalizer()};tlds=Object.keys(self.__compiled__).filter(function(name){return 0<name.length&&self.__compiled__[name]}).map(escapeRE).join(\"|\");self.re.schema_test=RegExp(\"(^|(?!_)(?:[\\x3e\\x3c｜]|\"+re.src_ZPCc+\"))(\"+tlds+\")\",\"i\");self.re.schema_search=RegExp(\"(^|(?!_)(?:[\\x3e\\x3c｜]|\"+re.src_ZPCc+\"))(\"+tlds+\")\",\"ig\");self.re.pretest=RegExp(\"(\"+self.re.schema_test.source+\")|(\"+self.re.host_fuzzy_test.source+\n\")|@\",\"i\");resetScanCache(self)}function Match(self,shift){var start=self.__index__,end=self.__last_index__,text=self.__text_cache__.slice(start,end);this.schema=self.__schema__.toLowerCase();this.index=start+shift;this.lastIndex=end+shift;this.url=this.text=this.raw=text}function createMatch(self,shift){shift=new Match(self,shift);self.__compiled__[shift.schema].normalize(shift,self);return shift}function LinkifyIt(schemas,options){if(!(this instanceof LinkifyIt))return new LinkifyIt(schemas,options);\n!options&&isOptionsObj(schemas)&&(options=schemas,schemas={});this.__opts__=assign({},defaultOptions,options);this.__last_index__=this.__index__=-1;this.__text_cache__=this.__schema__=\"\";this.__schemas__=assign({},defaultSchemas,schemas);this.__compiled__={};this.__tlds__=tlds_default;this.__tlds_replaced__=!1;this.re={};compile(this)}var defaultOptions={fuzzyLink:!0,fuzzyEmail:!0,fuzzyIP:!1},defaultSchemas={\"http:\":{validate:function(text,pos,self){text=text.slice(pos);self.re.http||(self.re.http=\nnew RegExp(\"^\\\\/\\\\/\"+self.re.src_auth+self.re.src_host_port_strict+self.re.src_path,\"i\"));return self.re.http.test(text)?text.match(self.re.http)[0].length:0}},\"https:\":\"http:\",\"ftp:\":\"http:\",\"//\":{validate:function(text,pos,self){var tail=text.slice(pos);self.re.no_http||(self.re.no_http=new RegExp(\"^\"+self.re.src_auth+\"(?:localhost|(?:(?:\"+self.re.src_domain+\")\\\\.)+\"+self.re.src_domain_root+\")\"+self.re.src_port+self.re.src_host_terminator+self.re.src_path,\"i\"));return self.re.no_http.test(tail)?\n3<=pos&&\":\"===text[pos-3]||3<=pos&&\"/\"===text[pos-3]?0:tail.match(self.re.no_http)[0].length:0}},\"mailto:\":{validate:function(text,pos,self){text=text.slice(pos);self.re.mailto||(self.re.mailto=new RegExp(\"^\"+self.re.src_email_name+\"@\"+self.re.src_host_strict,\"i\"));return self.re.mailto.test(text)?text.match(self.re.mailto)[0].length:0}}},tlds_default=\"biz com edu gov net org pro web xxx aero asia coop info museum name shop рф\".split(\" \");LinkifyIt.prototype.add=function(schema,definition){this.__schemas__[schema]=\ndefinition;compile(this);return this};LinkifyIt.prototype.set=function(options){this.__opts__=assign(this.__opts__,options);return this};LinkifyIt.prototype.test=function(text){this.__text_cache__=text;this.__index__=-1;if(!text.length)return!1;var m,ml,me,len;if(this.re.schema_test.test(text)){var re=this.re.schema_search;for(re.lastIndex=0;null!==(m=re.exec(text));)if(len=this.testSchemaAt(text,m[2],re.lastIndex)){this.__schema__=m[2];this.__index__=m.index+m[1].length;this.__last_index__=m.index+\nm[0].length+len;break}}this.__opts__.fuzzyLink&&this.__compiled__[\"http:\"]&&(m=text.search(this.re.host_fuzzy_test),0<=m&&(0>this.__index__||m<this.__index__)&&null!==(ml=text.match(this.__opts__.fuzzyIP?this.re.link_fuzzy:this.re.link_no_ip_fuzzy))&&(m=ml.index+ml[1].length,0>this.__index__||m<this.__index__))&&(this.__schema__=\"\",this.__index__=m,this.__last_index__=ml.index+ml[0].length);this.__opts__.fuzzyEmail&&this.__compiled__[\"mailto:\"]&&(ml=text.indexOf(\"@\"),0<=ml&&null!==(me=text.match(this.re.email_fuzzy))&&\n(m=me.index+me[1].length,text=me.index+me[0].length,0>this.__index__||m<this.__index__||m===this.__index__&&text>this.__last_index__))&&(this.__schema__=\"mailto:\",this.__index__=m,this.__last_index__=text);return 0<=this.__index__};LinkifyIt.prototype.pretest=function(text){return this.re.pretest.test(text)};LinkifyIt.prototype.testSchemaAt=function(text,schema,pos){return this.__compiled__[schema.toLowerCase()]?this.__compiled__[schema.toLowerCase()].validate(text,pos,this):0};LinkifyIt.prototype.match=\nfunction(text){var shift=0,result=[];0<=this.__index__&&this.__text_cache__===text&&(result.push(createMatch(this,shift)),shift=this.__last_index__);for(text=shift?text.slice(shift):text;this.test(text);)result.push(createMatch(this,shift)),text=text.slice(this.__last_index__),shift+=this.__last_index__;return result.length?result:null};LinkifyIt.prototype.tlds=function(list,keepOld){list=Array.isArray(list)?list:[list];if(!keepOld)return this.__tlds__=list.slice(),this.__tlds_replaced__=!0,compile(this),\nthis;this.__tlds__=this.__tlds__.concat(list).sort().filter(function(el,idx,arr){return el!==arr[idx-1]}).reverse();compile(this);return this};LinkifyIt.prototype.normalize=function(match){match.schema||(match.url=\"http://\"+match.url);\"mailto:\"!==match.schema||/^mailto:/i.test(match.url)||(match.url=\"mailto:\"+match.url)};LinkifyIt.prototype.onCompile=function(){};module.exports=LinkifyIt}","~:source","shadow$provide[\"module$node_modules$linkify_it$index\"] = function(global,require,module,exports) {\n'use strict';\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Helpers\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\nfunction isString(obj) { return _class(obj) === '[object String]'; }\nfunction isObject(obj) { return _class(obj) === '[object Object]'; }\nfunction isRegExp(obj) { return _class(obj) === '[object RegExp]'; }\nfunction isFunction(obj) { return _class(obj) === '[object Function]'; }\n\n\nfunction escapeRE(str) { return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&'); }\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar defaultOptions = {\n  fuzzyLink: true,\n  fuzzyEmail: true,\n  fuzzyIP: false\n};\n\n\nfunction isOptionsObj(obj) {\n  return Object.keys(obj || {}).reduce(function (acc, k) {\n    return acc || defaultOptions.hasOwnProperty(k);\n  }, false);\n}\n\n\nvar defaultSchemas = {\n  'http:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.http =  new RegExp(\n          '^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'\n        );\n      }\n      if (self.re.http.test(tail)) {\n        return tail.match(self.re.http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'https:':  'http:',\n  'ftp:':    'http:',\n  '//':      {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.no_http) {\n      // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.no_http =  new RegExp(\n          '^' +\n          self.re.src_auth +\n          // Don't allow single-level domains, because of false positives like '//test'\n          // with code comments\n          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' +\n          self.re.src_port +\n          self.re.src_host_terminator +\n          self.re.src_path,\n\n          'i'\n        );\n      }\n\n      if (self.re.no_http.test(tail)) {\n        // should not be `://` & `///`, that protects from errors in protocol name\n        if (pos >= 3 && text[pos - 3] === ':') { return 0; }\n        if (pos >= 3 && text[pos - 3] === '/') { return 0; }\n        return tail.match(self.re.no_http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'mailto:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.mailto) {\n        self.re.mailto =  new RegExp(\n          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'\n        );\n      }\n      if (self.re.mailto.test(tail)) {\n        return tail.match(self.re.mailto)[0].length;\n      }\n      return 0;\n    }\n  }\n};\n\n/*eslint-disable max-len*/\n\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\nvar tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';\n\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\nvar tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');\n\n/*eslint-enable max-len*/\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction resetScanCache(self) {\n  self.__index__ = -1;\n  self.__text_cache__   = '';\n}\n\nfunction createValidator(re) {\n  return function (text, pos) {\n    var tail = text.slice(pos);\n\n    if (re.test(tail)) {\n      return tail.match(re)[0].length;\n    }\n    return 0;\n  };\n}\n\nfunction createNormalizer() {\n  return function (match, self) {\n    self.normalize(match);\n  };\n}\n\n// Schemas compiler. Build regexps.\n//\nfunction compile(self) {\n\n  // Load & clone RE patterns.\n  var re = self.re = require('./lib/re')(self.__opts__);\n\n  // Define dynamic patterns\n  var tlds = self.__tlds__.slice();\n\n  self.onCompile();\n\n  if (!self.__tlds_replaced__) {\n    tlds.push(tlds_2ch_src_re);\n  }\n  tlds.push(re.src_xn);\n\n  re.src_tlds = tlds.join('|');\n\n  function untpl(tpl) { return tpl.replace('%TLDS%', re.src_tlds); }\n\n  re.email_fuzzy      = RegExp(untpl(re.tpl_email_fuzzy), 'i');\n  re.link_fuzzy       = RegExp(untpl(re.tpl_link_fuzzy), 'i');\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');\n  re.host_fuzzy_test  = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');\n\n  //\n  // Compile each schema\n  //\n\n  var aliases = [];\n\n  self.__compiled__ = {}; // Reset compiled data\n\n  function schemaError(name, val) {\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val);\n  }\n\n  Object.keys(self.__schemas__).forEach(function (name) {\n    var val = self.__schemas__[name];\n\n    // skip disabled methods\n    if (val === null) { return; }\n\n    var compiled = { validate: null, link: null };\n\n    self.__compiled__[name] = compiled;\n\n    if (isObject(val)) {\n      if (isRegExp(val.validate)) {\n        compiled.validate = createValidator(val.validate);\n      } else if (isFunction(val.validate)) {\n        compiled.validate = val.validate;\n      } else {\n        schemaError(name, val);\n      }\n\n      if (isFunction(val.normalize)) {\n        compiled.normalize = val.normalize;\n      } else if (!val.normalize) {\n        compiled.normalize = createNormalizer();\n      } else {\n        schemaError(name, val);\n      }\n\n      return;\n    }\n\n    if (isString(val)) {\n      aliases.push(name);\n      return;\n    }\n\n    schemaError(name, val);\n  });\n\n  //\n  // Compile postponed aliases\n  //\n\n  aliases.forEach(function (alias) {\n    if (!self.__compiled__[self.__schemas__[alias]]) {\n      // Silently fail on missed schemas to avoid errons on disable.\n      // schemaError(alias, self.__schemas__[alias]);\n      return;\n    }\n\n    self.__compiled__[alias].validate =\n      self.__compiled__[self.__schemas__[alias]].validate;\n    self.__compiled__[alias].normalize =\n      self.__compiled__[self.__schemas__[alias]].normalize;\n  });\n\n  //\n  // Fake record for guessed links\n  //\n  self.__compiled__[''] = { validate: null, normalize: createNormalizer() };\n\n  //\n  // Build schema condition\n  //\n  var slist = Object.keys(self.__compiled__)\n                      .filter(function (name) {\n                        // Filter disabled & fake schemas\n                        return name.length > 0 && self.__compiled__[name];\n                      })\n                      .map(escapeRE)\n                      .join('|');\n  // (?!_) cause 1.5x slowdown\n  self.re.schema_test   = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');\n  self.re.schema_search = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');\n\n  self.re.pretest = RegExp(\n    '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',\n    'i'\n  );\n\n  //\n  // Cleanup\n  //\n\n  resetScanCache(self);\n}\n\n/**\n * class Match\n *\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\n **/\nfunction Match(self, shift) {\n  var start = self.__index__,\n      end   = self.__last_index__,\n      text  = self.__text_cache__.slice(start, end);\n\n  /**\n   * Match#schema -> String\n   *\n   * Prefix (protocol) for matched string.\n   **/\n  this.schema    = self.__schema__.toLowerCase();\n  /**\n   * Match#index -> Number\n   *\n   * First position of matched string.\n   **/\n  this.index     = start + shift;\n  /**\n   * Match#lastIndex -> Number\n   *\n   * Next position after matched string.\n   **/\n  this.lastIndex = end + shift;\n  /**\n   * Match#raw -> String\n   *\n   * Matched string.\n   **/\n  this.raw       = text;\n  /**\n   * Match#text -> String\n   *\n   * Notmalized text of matched string.\n   **/\n  this.text      = text;\n  /**\n   * Match#url -> String\n   *\n   * Normalized url of matched string.\n   **/\n  this.url       = text;\n}\n\nfunction createMatch(self, shift) {\n  var match = new Match(self, shift);\n\n  self.__compiled__[match.schema].normalize(match, self);\n\n  return match;\n}\n\n\n/**\n * class LinkifyIt\n **/\n\n/**\n * new LinkifyIt(schemas, options)\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Creates new linkifier instance with optional additional schemas.\n * Can be called without `new` keyword for convenience.\n *\n * By default understands:\n *\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n *\n * `schemas` is an object, where each key/value describes protocol/rule:\n *\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n * - __value__ - rule to check tail after link prefix\n *   - _String_ - just alias to existing rule\n *   - _Object_\n *     - _validate_ - validator function (should return matched length on success),\n *       or `RegExp`.\n *     - _normalize_ - optional function to normalize text & url of matched result\n *       (for example, for @twitter mentions).\n *\n * `options`:\n *\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n *   like version numbers. Default `false`.\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n *\n **/\nfunction LinkifyIt(schemas, options) {\n  if (!(this instanceof LinkifyIt)) {\n    return new LinkifyIt(schemas, options);\n  }\n\n  if (!options) {\n    if (isOptionsObj(schemas)) {\n      options = schemas;\n      schemas = {};\n    }\n  }\n\n  this.__opts__           = assign({}, defaultOptions, options);\n\n  // Cache last tested result. Used to skip repeating steps on next `match` call.\n  this.__index__          = -1;\n  this.__last_index__     = -1; // Next scan position\n  this.__schema__         = '';\n  this.__text_cache__     = '';\n\n  this.__schemas__        = assign({}, defaultSchemas, schemas);\n  this.__compiled__       = {};\n\n  this.__tlds__           = tlds_default;\n  this.__tlds_replaced__  = false;\n\n  this.re = {};\n\n  compile(this);\n}\n\n\n/** chainable\n * LinkifyIt#add(schema, definition)\n * - schema (String): rule name (fixed pattern prefix)\n * - definition (String|RegExp|Object): schema definition\n *\n * Add new rule definition. See constructor description for details.\n **/\nLinkifyIt.prototype.add = function add(schema, definition) {\n  this.__schemas__[schema] = definition;\n  compile(this);\n  return this;\n};\n\n\n/** chainable\n * LinkifyIt#set(options)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Set recognition options for links without schema.\n **/\nLinkifyIt.prototype.set = function set(options) {\n  this.__opts__ = assign(this.__opts__, options);\n  return this;\n};\n\n\n/**\n * LinkifyIt#test(text) -> Boolean\n *\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n **/\nLinkifyIt.prototype.test = function test(text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__      = -1;\n\n  if (!text.length) { return false; }\n\n  var m, ml, me, len, shift, next, re, tld_pos, at_pos;\n\n  // try to scan for link with schema - that's the most simple rule\n  if (this.re.schema_test.test(text)) {\n    re = this.re.schema_search;\n    re.lastIndex = 0;\n    while ((m = re.exec(text)) !== null) {\n      len = this.testSchemaAt(text, m[2], re.lastIndex);\n      if (len) {\n        this.__schema__     = m[2];\n        this.__index__      = m.index + m[1].length;\n        this.__last_index__ = m.index + m[0].length + len;\n        break;\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n    // guess schemaless links\n    tld_pos = text.search(this.re.host_fuzzy_test);\n    if (tld_pos >= 0) {\n      // if tld is located after found link - no need to check fuzzy pattern\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n\n          shift = ml.index + ml[1].length;\n\n          if (this.__index__ < 0 || shift < this.__index__) {\n            this.__schema__     = '';\n            this.__index__      = shift;\n            this.__last_index__ = ml.index + ml[0].length;\n          }\n        }\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n    // guess schemaless emails\n    at_pos = text.indexOf('@');\n    if (at_pos >= 0) {\n      // We can't skip this check, because this cases are possible:\n      // 192.168.1.1@gmail.com, my.in@example.com\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\n\n        shift = me.index + me[1].length;\n        next  = me.index + me[0].length;\n\n        if (this.__index__ < 0 || shift < this.__index__ ||\n            (shift === this.__index__ && next > this.__last_index__)) {\n          this.__schema__     = 'mailto:';\n          this.__index__      = shift;\n          this.__last_index__ = next;\n        }\n      }\n    }\n  }\n\n  return this.__index__ >= 0;\n};\n\n\n/**\n * LinkifyIt#pretest(text) -> Boolean\n *\n * Very quick check, that can give false positives. Returns true if link MAY BE\n * can exists. Can be used for speed optimization, when you need to check that\n * link NOT exists.\n **/\nLinkifyIt.prototype.pretest = function pretest(text) {\n  return this.re.pretest.test(text);\n};\n\n\n/**\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\n * - text (String): text to scan\n * - name (String): rule (schema) name\n * - position (Number): text offset to check from\n *\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n * at given position. Returns length of found pattern (0 on fail).\n **/\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {\n  // If not supported schema check requested - terminate\n  if (!this.__compiled__[schema.toLowerCase()]) {\n    return 0;\n  }\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);\n};\n\n\n/**\n * LinkifyIt#match(text) -> Array|null\n *\n * Returns array of found link descriptions or `null` on fail. We strongly\n * recommend to use [[LinkifyIt#test]] first, for best speed.\n *\n * ##### Result match description\n *\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n *   protocol-neutral  links.\n * - __index__ - offset of matched text\n * - __lastIndex__ - index of next char after mathch end\n * - __raw__ - matched text\n * - __text__ - normalized text\n * - __url__ - link, generated from matched text\n **/\nLinkifyIt.prototype.match = function match(text) {\n  var shift = 0, result = [];\n\n  // Try to take previous element from cache, if .test() called before\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\n    result.push(createMatch(this, shift));\n    shift = this.__last_index__;\n  }\n\n  // Cut head if cache was used\n  var tail = shift ? text.slice(shift) : text;\n\n  // Scan string until end reached\n  while (this.test(tail)) {\n    result.push(createMatch(this, shift));\n\n    tail = tail.slice(this.__last_index__);\n    shift += this.__last_index__;\n  }\n\n  if (result.length) {\n    return result;\n  }\n\n  return null;\n};\n\n\n/** chainable\n * LinkifyIt#tlds(list [, keepOld]) -> this\n * - list (Array): list of tlds\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n *\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n * to avoid false positives. By default this algorythm used:\n *\n * - hostname with any 2-letter root zones are ok.\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\n *   are ok.\n * - encoded (`xn--...`) root zones are ok.\n *\n * If list is replaced, then exact match for 2-chars root zones will be checked.\n **/\nLinkifyIt.prototype.tlds = function tlds(list, keepOld) {\n  list = Array.isArray(list) ? list : [ list ];\n\n  if (!keepOld) {\n    this.__tlds__ = list.slice();\n    this.__tlds_replaced__ = true;\n    compile(this);\n    return this;\n  }\n\n  this.__tlds__ = this.__tlds__.concat(list)\n                                  .sort()\n                                  .filter(function (el, idx, arr) {\n                                    return el !== arr[idx - 1];\n                                  })\n                                  .reverse();\n\n  compile(this);\n  return this;\n};\n\n/**\n * LinkifyIt#normalize(match)\n *\n * Default normalizer (if schema does not define it's own).\n **/\nLinkifyIt.prototype.normalize = function normalize(match) {\n\n  // Do minimal possible changes by default. Need to collect feedback prior\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\n\n  if (!match.schema) { match.url = 'http://' + match.url; }\n\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\n    match.url = 'mailto:' + match.url;\n  }\n};\n\n\n/**\n * LinkifyIt#onCompile()\n *\n * Override to modify basic RegExp-s.\n **/\nLinkifyIt.prototype.onCompile = function onCompile() {\n};\n\n\nmodule.exports = LinkifyIt;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$linkify_it$lib$re"]],"~:properties",["^5",["testSchemaAt","onCompile","tlds","link_fuzzy","schema_test","__last_index__","url","normalize","index","no_http","validate","link_no_ip_fuzzy","http","schema","lastIndex","__text_cache__","__index__","__opts__","email_fuzzy","fuzzyLink","src_tlds","__compiled__","pretest","__schemas__","mailto","__schema__","text","link","match","add","set","re","raw","__tlds__","fuzzyEmail","host_fuzzy_test","__tlds_replaced__","schema_search","test","fuzzyIP"]],"~:compiled-at",1591107371180,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$linkify_it$index.js\",\n\"lineCount\":15,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/linkify-it/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$linkify_it$index\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\n\\n////////////////////////////////////////////////////////////////////////////////\\n// Helpers\\n\\n// Merge objects\\n//\\nfunction assign(obj /*from1, from2, from3, ...*/) {\\n  var sources = Array.prototype.slice.call(arguments, 1);\\n\\n  sources.forEach(function (source) {\\n    if (!source) { return; }\\n\\n    Object.keys(source).forEach(function (key) {\\n      obj[key] = source[key];\\n    });\\n  });\\n\\n  return obj;\\n}\\n\\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\\nfunction isString(obj) { return _class(obj) === '[object String]'; }\\nfunction isObject(obj) { return _class(obj) === '[object Object]'; }\\nfunction isRegExp(obj) { return _class(obj) === '[object RegExp]'; }\\nfunction isFunction(obj) { return _class(obj) === '[object Function]'; }\\n\\n\\nfunction escapeRE(str) { return str.replace(/[.?*+^$[\\\\]\\\\\\\\(){}|-]/g, '\\\\\\\\$&'); }\\n\\n////////////////////////////////////////////////////////////////////////////////\\n\\n\\nvar defaultOptions = {\\n  fuzzyLink: true,\\n  fuzzyEmail: true,\\n  fuzzyIP: false\\n};\\n\\n\\nfunction isOptionsObj(obj) {\\n  return Object.keys(obj || {}).reduce(function (acc, k) {\\n    return acc || defaultOptions.hasOwnProperty(k);\\n  }, false);\\n}\\n\\n\\nvar defaultSchemas = {\\n  'http:': {\\n    validate: function (text, pos, self) {\\n      var tail = text.slice(pos);\\n\\n      if (!self.re.http) {\\n        // compile lazily, because \\\"host\\\"-containing variables can change on tlds update.\\n        self.re.http =  new RegExp(\\n          '^\\\\\\\\/\\\\\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'\\n        );\\n      }\\n      if (self.re.http.test(tail)) {\\n        return tail.match(self.re.http)[0].length;\\n      }\\n      return 0;\\n    }\\n  },\\n  'https:':  'http:',\\n  'ftp:':    'http:',\\n  '//':      {\\n    validate: function (text, pos, self) {\\n      var tail = text.slice(pos);\\n\\n      if (!self.re.no_http) {\\n      // compile lazily, because \\\"host\\\"-containing variables can change on tlds update.\\n        self.re.no_http =  new RegExp(\\n          '^' +\\n          self.re.src_auth +\\n          // Don't allow single-level domains, because of false positives like '//test'\\n          // with code comments\\n          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\\\\\.)+' + self.re.src_domain_root + ')' +\\n          self.re.src_port +\\n          self.re.src_host_terminator +\\n          self.re.src_path,\\n\\n          'i'\\n        );\\n      }\\n\\n      if (self.re.no_http.test(tail)) {\\n        // should not be `://` & `///`, that protects from errors in protocol name\\n        if (pos >= 3 && text[pos - 3] === ':') { return 0; }\\n        if (pos >= 3 && text[pos - 3] === '/') { return 0; }\\n        return tail.match(self.re.no_http)[0].length;\\n      }\\n      return 0;\\n    }\\n  },\\n  'mailto:': {\\n    validate: function (text, pos, self) {\\n      var tail = text.slice(pos);\\n\\n      if (!self.re.mailto) {\\n        self.re.mailto =  new RegExp(\\n          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'\\n        );\\n      }\\n      if (self.re.mailto.test(tail)) {\\n        return tail.match(self.re.mailto)[0].length;\\n      }\\n      return 0;\\n    }\\n  }\\n};\\n\\n/*eslint-disable max-len*/\\n\\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\\nvar tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';\\n\\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\\nvar tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|\\u0440\\u0444'.split('|');\\n\\n/*eslint-enable max-len*/\\n\\n////////////////////////////////////////////////////////////////////////////////\\n\\nfunction resetScanCache(self) {\\n  self.__index__ = -1;\\n  self.__text_cache__   = '';\\n}\\n\\nfunction createValidator(re) {\\n  return function (text, pos) {\\n    var tail = text.slice(pos);\\n\\n    if (re.test(tail)) {\\n      return tail.match(re)[0].length;\\n    }\\n    return 0;\\n  };\\n}\\n\\nfunction createNormalizer() {\\n  return function (match, self) {\\n    self.normalize(match);\\n  };\\n}\\n\\n// Schemas compiler. Build regexps.\\n//\\nfunction compile(self) {\\n\\n  // Load & clone RE patterns.\\n  var re = self.re = require('./lib/re')(self.__opts__);\\n\\n  // Define dynamic patterns\\n  var tlds = self.__tlds__.slice();\\n\\n  self.onCompile();\\n\\n  if (!self.__tlds_replaced__) {\\n    tlds.push(tlds_2ch_src_re);\\n  }\\n  tlds.push(re.src_xn);\\n\\n  re.src_tlds = tlds.join('|');\\n\\n  function untpl(tpl) { return tpl.replace('%TLDS%', re.src_tlds); }\\n\\n  re.email_fuzzy      = RegExp(untpl(re.tpl_email_fuzzy), 'i');\\n  re.link_fuzzy       = RegExp(untpl(re.tpl_link_fuzzy), 'i');\\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');\\n  re.host_fuzzy_test  = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');\\n\\n  //\\n  // Compile each schema\\n  //\\n\\n  var aliases = [];\\n\\n  self.__compiled__ = {}; // Reset compiled data\\n\\n  function schemaError(name, val) {\\n    throw new Error('(LinkifyIt) Invalid schema \\\"' + name + '\\\": ' + val);\\n  }\\n\\n  Object.keys(self.__schemas__).forEach(function (name) {\\n    var val = self.__schemas__[name];\\n\\n    // skip disabled methods\\n    if (val === null) { return; }\\n\\n    var compiled = { validate: null, link: null };\\n\\n    self.__compiled__[name] = compiled;\\n\\n    if (isObject(val)) {\\n      if (isRegExp(val.validate)) {\\n        compiled.validate = createValidator(val.validate);\\n      } else if (isFunction(val.validate)) {\\n        compiled.validate = val.validate;\\n      } else {\\n        schemaError(name, val);\\n      }\\n\\n      if (isFunction(val.normalize)) {\\n        compiled.normalize = val.normalize;\\n      } else if (!val.normalize) {\\n        compiled.normalize = createNormalizer();\\n      } else {\\n        schemaError(name, val);\\n      }\\n\\n      return;\\n    }\\n\\n    if (isString(val)) {\\n      aliases.push(name);\\n      return;\\n    }\\n\\n    schemaError(name, val);\\n  });\\n\\n  //\\n  // Compile postponed aliases\\n  //\\n\\n  aliases.forEach(function (alias) {\\n    if (!self.__compiled__[self.__schemas__[alias]]) {\\n      // Silently fail on missed schemas to avoid errons on disable.\\n      // schemaError(alias, self.__schemas__[alias]);\\n      return;\\n    }\\n\\n    self.__compiled__[alias].validate =\\n      self.__compiled__[self.__schemas__[alias]].validate;\\n    self.__compiled__[alias].normalize =\\n      self.__compiled__[self.__schemas__[alias]].normalize;\\n  });\\n\\n  //\\n  // Fake record for guessed links\\n  //\\n  self.__compiled__[''] = { validate: null, normalize: createNormalizer() };\\n\\n  //\\n  // Build schema condition\\n  //\\n  var slist = Object.keys(self.__compiled__)\\n                      .filter(function (name) {\\n                        // Filter disabled & fake schemas\\n                        return name.length > 0 && self.__compiled__[name];\\n                      })\\n                      .map(escapeRE)\\n                      .join('|');\\n  // (?!_) cause 1.5x slowdown\\n  self.re.schema_test   = RegExp('(^|(?!_)(?:[><\\\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');\\n  self.re.schema_search = RegExp('(^|(?!_)(?:[><\\\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');\\n\\n  self.re.pretest = RegExp(\\n    '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',\\n    'i'\\n  );\\n\\n  //\\n  // Cleanup\\n  //\\n\\n  resetScanCache(self);\\n}\\n\\n/**\\n * class Match\\n *\\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\\n **/\\nfunction Match(self, shift) {\\n  var start = self.__index__,\\n      end   = self.__last_index__,\\n      text  = self.__text_cache__.slice(start, end);\\n\\n  /**\\n   * Match#schema -> String\\n   *\\n   * Prefix (protocol) for matched string.\\n   **/\\n  this.schema    = self.__schema__.toLowerCase();\\n  /**\\n   * Match#index -> Number\\n   *\\n   * First position of matched string.\\n   **/\\n  this.index     = start + shift;\\n  /**\\n   * Match#lastIndex -> Number\\n   *\\n   * Next position after matched string.\\n   **/\\n  this.lastIndex = end + shift;\\n  /**\\n   * Match#raw -> String\\n   *\\n   * Matched string.\\n   **/\\n  this.raw       = text;\\n  /**\\n   * Match#text -> String\\n   *\\n   * Notmalized text of matched string.\\n   **/\\n  this.text      = text;\\n  /**\\n   * Match#url -> String\\n   *\\n   * Normalized url of matched string.\\n   **/\\n  this.url       = text;\\n}\\n\\nfunction createMatch(self, shift) {\\n  var match = new Match(self, shift);\\n\\n  self.__compiled__[match.schema].normalize(match, self);\\n\\n  return match;\\n}\\n\\n\\n/**\\n * class LinkifyIt\\n **/\\n\\n/**\\n * new LinkifyIt(schemas, options)\\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\\n *\\n * Creates new linkifier instance with optional additional schemas.\\n * Can be called without `new` keyword for convenience.\\n *\\n * By default understands:\\n *\\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\\n * - \\\"fuzzy\\\" links and emails (example.com, foo@bar.com).\\n *\\n * `schemas` is an object, where each key/value describes protocol/rule:\\n *\\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\\n * - __value__ - rule to check tail after link prefix\\n *   - _String_ - just alias to existing rule\\n *   - _Object_\\n *     - _validate_ - validator function (should return matched length on success),\\n *       or `RegExp`.\\n *     - _normalize_ - optional function to normalize text & url of matched result\\n *       (for example, for @twitter mentions).\\n *\\n * `options`:\\n *\\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\\n *   like version numbers. Default `false`.\\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\\n *\\n **/\\nfunction LinkifyIt(schemas, options) {\\n  if (!(this instanceof LinkifyIt)) {\\n    return new LinkifyIt(schemas, options);\\n  }\\n\\n  if (!options) {\\n    if (isOptionsObj(schemas)) {\\n      options = schemas;\\n      schemas = {};\\n    }\\n  }\\n\\n  this.__opts__           = assign({}, defaultOptions, options);\\n\\n  // Cache last tested result. Used to skip repeating steps on next `match` call.\\n  this.__index__          = -1;\\n  this.__last_index__     = -1; // Next scan position\\n  this.__schema__         = '';\\n  this.__text_cache__     = '';\\n\\n  this.__schemas__        = assign({}, defaultSchemas, schemas);\\n  this.__compiled__       = {};\\n\\n  this.__tlds__           = tlds_default;\\n  this.__tlds_replaced__  = false;\\n\\n  this.re = {};\\n\\n  compile(this);\\n}\\n\\n\\n/** chainable\\n * LinkifyIt#add(schema, definition)\\n * - schema (String): rule name (fixed pattern prefix)\\n * - definition (String|RegExp|Object): schema definition\\n *\\n * Add new rule definition. See constructor description for details.\\n **/\\nLinkifyIt.prototype.add = function add(schema, definition) {\\n  this.__schemas__[schema] = definition;\\n  compile(this);\\n  return this;\\n};\\n\\n\\n/** chainable\\n * LinkifyIt#set(options)\\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\\n *\\n * Set recognition options for links without schema.\\n **/\\nLinkifyIt.prototype.set = function set(options) {\\n  this.__opts__ = assign(this.__opts__, options);\\n  return this;\\n};\\n\\n\\n/**\\n * LinkifyIt#test(text) -> Boolean\\n *\\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\\n **/\\nLinkifyIt.prototype.test = function test(text) {\\n  // Reset scan cache\\n  this.__text_cache__ = text;\\n  this.__index__      = -1;\\n\\n  if (!text.length) { return false; }\\n\\n  var m, ml, me, len, shift, next, re, tld_pos, at_pos;\\n\\n  // try to scan for link with schema - that's the most simple rule\\n  if (this.re.schema_test.test(text)) {\\n    re = this.re.schema_search;\\n    re.lastIndex = 0;\\n    while ((m = re.exec(text)) !== null) {\\n      len = this.testSchemaAt(text, m[2], re.lastIndex);\\n      if (len) {\\n        this.__schema__     = m[2];\\n        this.__index__      = m.index + m[1].length;\\n        this.__last_index__ = m.index + m[0].length + len;\\n        break;\\n      }\\n    }\\n  }\\n\\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\\n    // guess schemaless links\\n    tld_pos = text.search(this.re.host_fuzzy_test);\\n    if (tld_pos >= 0) {\\n      // if tld is located after found link - no need to check fuzzy pattern\\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\\n\\n          shift = ml.index + ml[1].length;\\n\\n          if (this.__index__ < 0 || shift < this.__index__) {\\n            this.__schema__     = '';\\n            this.__index__      = shift;\\n            this.__last_index__ = ml.index + ml[0].length;\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\\n    // guess schemaless emails\\n    at_pos = text.indexOf('@');\\n    if (at_pos >= 0) {\\n      // We can't skip this check, because this cases are possible:\\n      // 192.168.1.1@gmail.com, my.in@example.com\\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\\n\\n        shift = me.index + me[1].length;\\n        next  = me.index + me[0].length;\\n\\n        if (this.__index__ < 0 || shift < this.__index__ ||\\n            (shift === this.__index__ && next > this.__last_index__)) {\\n          this.__schema__     = 'mailto:';\\n          this.__index__      = shift;\\n          this.__last_index__ = next;\\n        }\\n      }\\n    }\\n  }\\n\\n  return this.__index__ >= 0;\\n};\\n\\n\\n/**\\n * LinkifyIt#pretest(text) -> Boolean\\n *\\n * Very quick check, that can give false positives. Returns true if link MAY BE\\n * can exists. Can be used for speed optimization, when you need to check that\\n * link NOT exists.\\n **/\\nLinkifyIt.prototype.pretest = function pretest(text) {\\n  return this.re.pretest.test(text);\\n};\\n\\n\\n/**\\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\\n * - text (String): text to scan\\n * - name (String): rule (schema) name\\n * - position (Number): text offset to check from\\n *\\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\\n * at given position. Returns length of found pattern (0 on fail).\\n **/\\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {\\n  // If not supported schema check requested - terminate\\n  if (!this.__compiled__[schema.toLowerCase()]) {\\n    return 0;\\n  }\\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);\\n};\\n\\n\\n/**\\n * LinkifyIt#match(text) -> Array|null\\n *\\n * Returns array of found link descriptions or `null` on fail. We strongly\\n * recommend to use [[LinkifyIt#test]] first, for best speed.\\n *\\n * ##### Result match description\\n *\\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\\n *   protocol-neutral  links.\\n * - __index__ - offset of matched text\\n * - __lastIndex__ - index of next char after mathch end\\n * - __raw__ - matched text\\n * - __text__ - normalized text\\n * - __url__ - link, generated from matched text\\n **/\\nLinkifyIt.prototype.match = function match(text) {\\n  var shift = 0, result = [];\\n\\n  // Try to take previous element from cache, if .test() called before\\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\\n    result.push(createMatch(this, shift));\\n    shift = this.__last_index__;\\n  }\\n\\n  // Cut head if cache was used\\n  var tail = shift ? text.slice(shift) : text;\\n\\n  // Scan string until end reached\\n  while (this.test(tail)) {\\n    result.push(createMatch(this, shift));\\n\\n    tail = tail.slice(this.__last_index__);\\n    shift += this.__last_index__;\\n  }\\n\\n  if (result.length) {\\n    return result;\\n  }\\n\\n  return null;\\n};\\n\\n\\n/** chainable\\n * LinkifyIt#tlds(list [, keepOld]) -> this\\n * - list (Array): list of tlds\\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\\n *\\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\\n * to avoid false positives. By default this algorythm used:\\n *\\n * - hostname with any 2-letter root zones are ok.\\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|\\u0440\\u0444\\n *   are ok.\\n * - encoded (`xn--...`) root zones are ok.\\n *\\n * If list is replaced, then exact match for 2-chars root zones will be checked.\\n **/\\nLinkifyIt.prototype.tlds = function tlds(list, keepOld) {\\n  list = Array.isArray(list) ? list : [ list ];\\n\\n  if (!keepOld) {\\n    this.__tlds__ = list.slice();\\n    this.__tlds_replaced__ = true;\\n    compile(this);\\n    return this;\\n  }\\n\\n  this.__tlds__ = this.__tlds__.concat(list)\\n                                  .sort()\\n                                  .filter(function (el, idx, arr) {\\n                                    return el !== arr[idx - 1];\\n                                  })\\n                                  .reverse();\\n\\n  compile(this);\\n  return this;\\n};\\n\\n/**\\n * LinkifyIt#normalize(match)\\n *\\n * Default normalizer (if schema does not define it's own).\\n **/\\nLinkifyIt.prototype.normalize = function normalize(match) {\\n\\n  // Do minimal possible changes by default. Need to collect feedback prior\\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\\n\\n  if (!match.schema) { match.url = 'http://' + match.url; }\\n\\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\\n    match.url = 'mailto:' + match.url;\\n  }\\n};\\n\\n\\n/**\\n * LinkifyIt#onCompile()\\n *\\n * Override to modify basic RegExp-s.\\n **/\\nLinkifyIt.prototype.onCompile = function onCompile() {\\n};\\n\\n\\nmodule.exports = LinkifyIt;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"assign\",\"obj\",\"Array\",\"prototype\",\"slice\",\"call\",\"sources\",\"arguments\",\"forEach\",\"source\",\"Object\",\"keys\",\"key\",\"_class\",\"toString\",\"escapeRE\",\"str\",\"replace\",\"isOptionsObj\",\"reduce\",\"acc\",\"k\",\"defaultOptions\",\"hasOwnProperty\",\"resetScanCache\",\"self\",\"__index__\",\"__text_cache__\",\"createValidator\",\"re\",\"text\",\"pos\",\"tail\",\"test\",\"match\",\"length\",\"createNormalizer\",\"normalize\",\"compile\",\"untpl\",\"tpl\",\"src_tlds\",\"schemaError\",\"name\",\"val\",\"Error\",\"__opts__\",\"tlds\",\"__tlds__\",\"onCompile\",\"__tlds_replaced__\",\"push\",\"tlds_2ch_src_re\",\"src_xn\",\"join\",\"email_fuzzy\",\"RegExp\",\"tpl_email_fuzzy\",\"link_fuzzy\",\"tpl_link_fuzzy\",\"link_no_ip_fuzzy\",\"tpl_link_no_ip_fuzzy\",\"host_fuzzy_test\",\"tpl_host_fuzzy_test\",\"aliases\",\"__compiled__\",\"__schemas__\",\"compiled\",\"validate\",\"link\",\"alias\",\"slist\",\"filter\",\"map\",\"schema_test\",\"src_ZPCc\",\"schema_search\",\"pretest\",\"Match\",\"shift\",\"start\",\"end\",\"__last_index__\",\"schema\",\"__schema__\",\"toLowerCase\",\"index\",\"lastIndex\",\"url\",\"raw\",\"createMatch\",\"LinkifyIt\",\"schemas\",\"options\",\"defaultSchemas\",\"tlds_default\",\"fuzzyLink\",\"fuzzyEmail\",\"fuzzyIP\",\"http\",\"src_auth\",\"src_host_port_strict\",\"src_path\",\"no_http\",\"src_domain\",\"src_domain_root\",\"src_port\",\"src_host_terminator\",\"mailto\",\"src_email_name\",\"src_host_strict\",\"add\",\"LinkifyIt.prototype.add\",\"definition\",\"set\",\"LinkifyIt.prototype.set\",\"LinkifyIt.prototype.test\",\"m\",\"ml\",\"me\",\"len\",\"exec\",\"testSchemaAt\",\"tld_pos\",\"search\",\"at_pos\",\"indexOf\",\"next\",\"LinkifyIt.prototype.pretest\",\"LinkifyIt.prototype.testSchemaAt\",\"LinkifyIt.prototype.match\",\"result\",\"LinkifyIt.prototype.tlds\",\"list\",\"keepOld\",\"isArray\",\"concat\",\"sort\",\"el\",\"idx\",\"arr\",\"reverse\",\"LinkifyIt.prototype.normalize\",\"LinkifyIt.prototype.onCompile\"]\n}\n"]
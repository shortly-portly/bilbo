["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/markdown-it/lib/rules_block/hr.js"],"~:js","shadow$provide.module$node_modules$markdown_it$lib$rules_block$hr=function(global,require,module,exports){var isSpace=require(\"module$node_modules$markdown_it$lib$common$utils\").isSpace;module.exports=function(state,startLine,endLine,silent){var cnt,pos=state.bMarks[startLine]+state.tShift[startLine],max=state.eMarks[startLine];if(4<=state.sCount[startLine]-state.blkIndent)return!1;endLine=state.src.charCodeAt(pos++);if(42!==endLine&&45!==endLine&&95!==endLine)return!1;for(cnt=1;pos<max;){var ch=\nstate.src.charCodeAt(pos++);if(ch!==endLine&&!isSpace(ch))return!1;ch===endLine&&cnt++}if(3>cnt)return!1;if(silent)return!0;state.line=startLine+1;silent=state.push(\"hr\",\"hr\",0);silent.map=[startLine,state.line];silent.markup=Array(cnt+1).join(String.fromCharCode(endLine));return!0}}","~:source","shadow$provide[\"module$node_modules$markdown_it$lib$rules_block$hr\"] = function(global,require,module,exports) {\n// Horizontal rule\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function hr(state, startLine, endLine, silent) {\n  var marker, cnt, ch, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  marker = state.src.charCodeAt(pos++);\n\n  // Check hr marker\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x5F/* _ */) {\n    return false;\n  }\n\n  // markers can be mixed with spaces, but there should be at least 3 of them\n\n  cnt = 1;\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos++);\n    if (ch !== marker && !isSpace(ch)) { return false; }\n    if (ch === marker) { cnt++; }\n  }\n\n  if (cnt < 3) { return false; }\n\n  if (silent) { return true; }\n\n  state.line = startLine + 1;\n\n  token        = state.push('hr', 'hr', 0);\n  token.map    = [ startLine, state.line ];\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n\n  return true;\n};\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$markdown_it$lib$common$utils"]],"~:properties",["^5",["map","markup","line"]],"~:compiled-at",1591107371171,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$markdown_it$lib$rules_block$hr.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,mDAAA,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAK/G,IAAIC,QAAUH,OAAA,CAAQ,kDAAR,CAAAG,QAGdF,OAAAC,QAAA,CAAiBE,QAAW,CAACC,KAAD,CAAQC,SAAR,CAAmBC,OAAnB,CAA4BC,MAA5B,CAAoC,CAAA,IAClDC,GADkD,CAE1DC,IAAML,KAAAM,OAAA,CAAaL,SAAb,CAANI,CAAgCL,KAAAO,OAAA,CAAaN,SAAb,CAF0B,CAG1DO,IAAMR,KAAAS,OAAA,CAAaR,SAAb,CAGV,IAAiD,CAAjD,EAAID,KAAAU,OAAA,CAAaT,SAAb,CAAJ,CAA8BD,KAAAW,UAA9B,CAAsD,MAAO,CAAA,CAE7DC,QAAA,CAASZ,KAAAa,IAAAC,WAAA,CAAqBT,GAAA,EAArB,CAGT,IAAe,EAAf,GAAIO,OAAJ,EACe,EADf,GACIA,OADJ,EAEe,EAFf,GAEIA,OAFJ,CAGE,MAAO,CAAA,CAMT,KADAR,GACA,CADM,CACN,CAAOC,GAAP,CAAaG,GAAb,CAAA,CAAkB,CAChB,IAAAO;AAAKf,KAAAa,IAAAC,WAAA,CAAqBT,GAAA,EAArB,CACL,IAAIU,EAAJ,GAAWH,OAAX,EAAqB,CAACd,OAAA,CAAQiB,EAAR,CAAtB,CAAqC,MAAO,CAAA,CACxCA,GAAJ,GAAWH,OAAX,EAAqBR,GAAA,EAHL,CAMlB,GAAU,CAAV,CAAIA,GAAJ,CAAe,MAAO,CAAA,CAEtB,IAAID,MAAJ,CAAc,MAAO,CAAA,CAErBH,MAAAgB,KAAA,CAAaf,SAAb,CAAyB,CAEzBgB,OAAA,CAAejB,KAAAkB,KAAA,CAAW,IAAX,CAAiB,IAAjB,CAAuB,CAAvB,CACfD,OAAAE,IAAA,CAAe,CAAElB,SAAF,CAAaD,KAAAgB,KAAb,CACfC,OAAAG,OAAA,CAAeC,KAAA,CAAMjB,GAAN,CAAY,CAAZ,CAAAkB,KAAA,CAAoBC,MAAAC,aAAA,CAAoBZ,OAApB,CAApB,CAEf,OAAO,CAAA,CApCuD,CAR+C;\",\n\"sources\":[\"node_modules/markdown-it/lib/rules_block/hr.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$markdown_it$lib$rules_block$hr\\\"] = function(global,require,module,exports) {\\n// Horizontal rule\\n\\n'use strict';\\n\\nvar isSpace = require('../common/utils').isSpace;\\n\\n\\nmodule.exports = function hr(state, startLine, endLine, silent) {\\n  var marker, cnt, ch, token,\\n      pos = state.bMarks[startLine] + state.tShift[startLine],\\n      max = state.eMarks[startLine];\\n\\n  // if it's indented more than 3 spaces, it should be a code block\\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\\n\\n  marker = state.src.charCodeAt(pos++);\\n\\n  // Check hr marker\\n  if (marker !== 0x2A/* * */ &&\\n      marker !== 0x2D/* - */ &&\\n      marker !== 0x5F/* _ */) {\\n    return false;\\n  }\\n\\n  // markers can be mixed with spaces, but there should be at least 3 of them\\n\\n  cnt = 1;\\n  while (pos < max) {\\n    ch = state.src.charCodeAt(pos++);\\n    if (ch !== marker && !isSpace(ch)) { return false; }\\n    if (ch === marker) { cnt++; }\\n  }\\n\\n  if (cnt < 3) { return false; }\\n\\n  if (silent) { return true; }\\n\\n  state.line = startLine + 1;\\n\\n  token        = state.push('hr', 'hr', 0);\\n  token.map    = [ startLine, state.line ];\\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\\n\\n  return true;\\n};\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"isSpace\",\"module.exports\",\"state\",\"startLine\",\"endLine\",\"silent\",\"cnt\",\"pos\",\"bMarks\",\"tShift\",\"max\",\"eMarks\",\"sCount\",\"blkIndent\",\"marker\",\"src\",\"charCodeAt\",\"ch\",\"line\",\"token\",\"push\",\"map\",\"markup\",\"Array\",\"join\",\"String\",\"fromCharCode\"]\n}\n"]
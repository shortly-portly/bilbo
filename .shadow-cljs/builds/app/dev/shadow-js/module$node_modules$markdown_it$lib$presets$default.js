["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/markdown-it/lib/presets/default.js"],"~:js","shadow$provide.module$node_modules$markdown_it$lib$presets$default=function(global,require,module,exports){module.exports={options:{html:!1,xhtmlOut:!1,breaks:!1,langPrefix:\"language-\",linkify:!1,typographer:!1,quotes:\"“”‘’\",highlight:null,maxNesting:100},components:{core:{},block:{},inline:{}}}}","~:source","shadow$provide[\"module$node_modules$markdown_it$lib$presets$default\"] = function(global,require,module,exports) {\n// markdown-it default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   100            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {},\n    block: {},\n    inline: {}\n  }\n};\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["langPrefix","breaks","inline","block","quotes","xhtmlOut","maxNesting","linkify","components","highlight","html","options","core","typographer"]],"~:compiled-at",1591107371181,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$markdown_it$lib$presets$default.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,oDAAA,CAAwE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAMhHD,MAAAC,QAAA,CAAiB,CACfC,QAAS,CACPC,KAAc,CAAA,CADP,CAEPC,SAAc,CAAA,CAFP,CAGPC,OAAc,CAAA,CAHP,CAIPC,WAAc,WAJP,CAKPC,QAAc,CAAA,CALP,CAQPC,YAAc,CAAA,CARP,CAePC,OAAQ,MAfD,CAuBPC,UAAW,IAvBJ,CAyBPC,WAAc,GAzBP,CADM,CA6BfC,WAAY,CAEVC,KAAM,EAFI,CAGVC,MAAO,EAHG,CAIVC,OAAQ,EAJE,CA7BG,CAN+F;\",\n\"sources\":[\"node_modules/markdown-it/lib/presets/default.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$markdown_it$lib$presets$default\\\"] = function(global,require,module,exports) {\\n// markdown-it default options\\n\\n'use strict';\\n\\n\\nmodule.exports = {\\n  options: {\\n    html:         false,        // Enable HTML tags in source\\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\\n    breaks:       false,        // Convert '\\\\n' in paragraphs into <br>\\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\\n    linkify:      false,        // autoconvert URL-like texts to links\\n\\n    // Enable some language-neutral replacements + quotes beautification\\n    typographer:  false,\\n\\n    // Double + single quotes replacement pairs, when typographer enabled,\\n    // and smartquotes on. Could be either a String or an Array.\\n    //\\n    // For example, you can use '\\u00ab\\u00bb\\u201e\\u201c' for Russian, '\\u201e\\u201c\\u201a\\u2018' for German,\\n    // and ['\\u00ab\\\\xA0', '\\\\xA0\\u00bb', '\\u2039\\\\xA0', '\\\\xA0\\u203a'] for French (including nbsp).\\n    quotes: '\\\\u201c\\\\u201d\\\\u2018\\\\u2019', /* \\u201c\\u201d\\u2018\\u2019 */\\n\\n    // Highlighter function. Should return escaped HTML,\\n    // or '' if the source string is not changed and should be escaped externaly.\\n    // If result starts with <pre... internal wrapper is skipped.\\n    //\\n    // function (/*str, lang*/) { return ''; }\\n    //\\n    highlight: null,\\n\\n    maxNesting:   100            // Internal protection, recursion limit\\n  },\\n\\n  components: {\\n\\n    core: {},\\n    block: {},\\n    inline: {}\\n  }\\n};\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"options\",\"html\",\"xhtmlOut\",\"breaks\",\"langPrefix\",\"linkify\",\"typographer\",\"quotes\",\"highlight\",\"maxNesting\",\"components\",\"core\",\"block\",\"inline\"]\n}\n"]
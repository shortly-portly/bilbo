["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/markdown-it/lib/helpers/parse_link_destination.js"],"~:js","shadow$provide.module$node_modules$markdown_it$lib$helpers$parse_link_destination=function(global,require,module,exports){var unescapeAll=require(\"module$node_modules$markdown_it$lib$common$utils\").unescapeAll;module.exports=function(str,pos,max){var level,start=pos,result={ok:!1,pos:0,lines:0,str:\"\"};if(60===str.charCodeAt(pos)){for(pos++;pos<max;){var code=str.charCodeAt(pos);if(10===code)break;if(62===code){result.pos=pos+1;result.str=unescapeAll(str.slice(start+1,pos));result.ok=!0;break}92===\ncode&&pos+1<max?pos+=2:pos++}return result}for(level=0;pos<max;){code=str.charCodeAt(pos);if(32===code)break;if(32>code||127===code)break;if(92===code&&pos+1<max)pos+=2;else{40===code&&level++;if(41===code){if(0===level)break;level--}pos++}}if(start===pos||0!==level)return result;result.str=unescapeAll(str.slice(start,pos));result.lines=0;result.pos=pos;result.ok=!0;return result}}","~:source","shadow$provide[\"module$node_modules$markdown_it$lib$helpers$parse_link_destination\"] = function(global,require,module,exports) {\n// Parse link destination\n//\n'use strict';\n\n\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkDestination(str, pos, max) {\n  var code, level,\n      lines = 0,\n      start = pos,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (str.charCodeAt(pos) === 0x3C /* < */) {\n    pos++;\n    while (pos < max) {\n      code = str.charCodeAt(pos);\n      if (code === 0x0A /* \\n */) { return result; }\n      if (code === 0x3E /* > */) {\n        result.pos = pos + 1;\n        result.str = unescapeAll(str.slice(start + 1, pos));\n        result.ok = true;\n        return result;\n      }\n      if (code === 0x5C /* \\ */ && pos + 1 < max) {\n        pos += 2;\n        continue;\n      }\n\n      pos++;\n    }\n\n    // no closing '>'\n    return result;\n  }\n\n  // this should be ... } else { ... branch\n\n  level = 0;\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n\n    if (code === 0x20) { break; }\n\n    // ascii control characters\n    if (code < 0x20 || code === 0x7F) { break; }\n\n    if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos += 2;\n      continue;\n    }\n\n    if (code === 0x28 /* ( */) {\n      level++;\n    }\n\n    if (code === 0x29 /* ) */) {\n      if (level === 0) { break; }\n      level--;\n    }\n\n    pos++;\n  }\n\n  if (start === pos) { return result; }\n  if (level !== 0) { return result; }\n\n  result.str = unescapeAll(str.slice(start, pos));\n  result.lines = lines;\n  result.pos = pos;\n  result.ok = true;\n  return result;\n};\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$markdown_it$lib$common$utils"]],"~:properties",["^5",["pos","lines","str","ok"]],"~:compiled-at",1591107371166,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$markdown_it$lib$helpers$parse_link_destination.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,mEAAA,CAAuF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAM/H,IAAIC,YAAcH,OAAA,CAAQ,kDAAR,CAAAG,YAGlBF,OAAAC,QAAA,CAAiBE,QAA6B,CAACC,GAAD,CAAMC,GAAN,CAAWC,GAAX,CAAgB,CAAA,IAClDC,KADkD,CAGxDC,MAAQH,GAHgD,CAIxDI,OAAS,CACPC,GAAI,CAAA,CADG,CAEPL,IAAK,CAFE,CAGPM,MAAO,CAHA,CAIPP,IAAK,EAJE,CAOb,IAA4B,EAA5B,GAAIA,GAAAQ,WAAA,CAAeP,GAAf,CAAJ,CAA0C,CAExC,IADAA,GAAA,EACA,CAAOA,GAAP,CAAaC,GAAb,CAAA,CAAkB,CAChB,IAAAO,KAAOT,GAAAQ,WAAA,CAAeP,GAAf,CACP,IAAa,EAAb,GAAIQ,IAAJ,CAA8B,KAC9B,IAAa,EAAb,GAAIA,IAAJ,CAA2B,CACzBJ,MAAAJ,IAAA,CAAaA,GAAb,CAAmB,CACnBI,OAAAL,IAAA,CAAaF,WAAA,CAAYE,GAAAU,MAAA,CAAUN,KAAV,CAAkB,CAAlB,CAAqBH,GAArB,CAAZ,CACbI,OAAAC,GAAA,CAAY,CAAA,CACZ,MAJyB,CAMd,EAAb;AAAIG,IAAJ,EAA6BR,GAA7B,CAAmC,CAAnC,CAAuCC,GAAvC,CACED,GADF,EACS,CADT,CAKAA,GAAA,EAdgB,CAkBlB,MAAOI,OApBiC,CA0B1C,IADAF,KACA,CADQ,CACR,CAAOF,GAAP,CAAaC,GAAb,CAAA,CAAkB,CAChBO,IAAA,CAAOT,GAAAQ,WAAA,CAAeP,GAAf,CAEP,IAAa,EAAb,GAAIQ,IAAJ,CAAqB,KAGrB,IAAW,EAAX,CAAIA,IAAJ,EAA4B,GAA5B,GAAmBA,IAAnB,CAAoC,KAEpC,IAAa,EAAb,GAAIA,IAAJ,EAA6BR,GAA7B,CAAmC,CAAnC,CAAuCC,GAAvC,CACED,GAAA,EAAO,CADT,KAAA,CAKa,EAAb,GAAIQ,IAAJ,EACEN,KAAA,EAGF,IAAa,EAAb,GAAIM,IAAJ,CAA2B,CACzB,GAAc,CAAd,GAAIN,KAAJ,CAAmB,KACnBA,MAAA,EAFyB,CAK3BF,GAAA,EAdA,CARgB,CA0BlB,GADIG,KACJ,GADcH,GACd,EAAc,CAAd,GAAIE,KAAJ,CAAmB,MAAOE,OAE1BA,OAAAL,IAAA,CAAaF,WAAA,CAAYE,GAAAU,MAAA,CAAUN,KAAV,CAAiBH,GAAjB,CAAZ,CACbI,OAAAE,MAAA,CAhEYA,CAiEZF,OAAAJ,IAAA,CAAaA,GACbI,OAAAC,GAAA,CAAY,CAAA,CACZ,OAAOD,OArEqD,CATiE;\",\n\"sources\":[\"node_modules/markdown-it/lib/helpers/parse_link_destination.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$markdown_it$lib$helpers$parse_link_destination\\\"] = function(global,require,module,exports) {\\n// Parse link destination\\n//\\n'use strict';\\n\\n\\nvar unescapeAll = require('../common/utils').unescapeAll;\\n\\n\\nmodule.exports = function parseLinkDestination(str, pos, max) {\\n  var code, level,\\n      lines = 0,\\n      start = pos,\\n      result = {\\n        ok: false,\\n        pos: 0,\\n        lines: 0,\\n        str: ''\\n      };\\n\\n  if (str.charCodeAt(pos) === 0x3C /* < */) {\\n    pos++;\\n    while (pos < max) {\\n      code = str.charCodeAt(pos);\\n      if (code === 0x0A /* \\\\n */) { return result; }\\n      if (code === 0x3E /* > */) {\\n        result.pos = pos + 1;\\n        result.str = unescapeAll(str.slice(start + 1, pos));\\n        result.ok = true;\\n        return result;\\n      }\\n      if (code === 0x5C /* \\\\ */ && pos + 1 < max) {\\n        pos += 2;\\n        continue;\\n      }\\n\\n      pos++;\\n    }\\n\\n    // no closing '>'\\n    return result;\\n  }\\n\\n  // this should be ... } else { ... branch\\n\\n  level = 0;\\n  while (pos < max) {\\n    code = str.charCodeAt(pos);\\n\\n    if (code === 0x20) { break; }\\n\\n    // ascii control characters\\n    if (code < 0x20 || code === 0x7F) { break; }\\n\\n    if (code === 0x5C /* \\\\ */ && pos + 1 < max) {\\n      pos += 2;\\n      continue;\\n    }\\n\\n    if (code === 0x28 /* ( */) {\\n      level++;\\n    }\\n\\n    if (code === 0x29 /* ) */) {\\n      if (level === 0) { break; }\\n      level--;\\n    }\\n\\n    pos++;\\n  }\\n\\n  if (start === pos) { return result; }\\n  if (level !== 0) { return result; }\\n\\n  result.str = unescapeAll(str.slice(start, pos));\\n  result.lines = lines;\\n  result.pos = pos;\\n  result.ok = true;\\n  return result;\\n};\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"unescapeAll\",\"module.exports\",\"str\",\"pos\",\"max\",\"level\",\"start\",\"result\",\"ok\",\"lines\",\"charCodeAt\",\"code\",\"slice\"]\n}\n"]
["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/markdown-it/lib/rules_core/block.js"],"~:js","shadow$provide.module$node_modules$markdown_it$lib$rules_core$block=function(global,require,module,exports){module.exports=function(state){if(state.inlineMode){var token=new state.Token(\"inline\",\"\",0);token.content=state.src;token.map=[0,1];token.children=[];state.tokens.push(token)}else state.md.block.parse(state.src,state.md,state.env,state.tokens)}}","~:source","shadow$provide[\"module$node_modules$markdown_it$lib$rules_core$block\"] = function(global,require,module,exports) {\n'use strict';\n\n\nmodule.exports = function block(state) {\n  var token;\n\n  if (state.inlineMode) {\n    token          = new state.Token('inline', '', 0);\n    token.content  = state.src;\n    token.map      = [ 0, 1 ];\n    token.children = [];\n    state.tokens.push(token);\n  } else {\n    state.md.block.parse(state.src, state.md, state.env, state.tokens);\n  }\n};\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["map","children","content"]],"~:compiled-at",1591107371167,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$markdown_it$lib$rules_core$block.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,qDAAA,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAIjHD,MAAAC,QAAA,CAAiBC,QAAc,CAACC,KAAD,CAAQ,CAGrC,GAAIA,KAAAC,WAAJ,CAAsB,CACpB,IAAAC,MAAiB,IAAIF,KAAAG,MAAJ,CAAgB,QAAhB,CAA0B,EAA1B,CAA8B,CAA9B,CACjBD,MAAAE,QAAA,CAAiBJ,KAAAK,IACjBH,MAAAI,IAAA,CAAiB,CAAE,CAAF,CAAK,CAAL,CACjBJ,MAAAK,SAAA,CAAiB,EACjBP,MAAAQ,OAAAC,KAAA,CAAkBP,KAAlB,CALoB,CAAtB,IAOEF,MAAAU,GAAAC,MAAAC,MAAA,CAAqBZ,KAAAK,IAArB,CAAgCL,KAAAU,GAAhC,CAA0CV,KAAAa,IAA1C,CAAqDb,KAAAQ,OAArD,CAVmC,CAJ0E;\",\n\"sources\":[\"node_modules/markdown-it/lib/rules_core/block.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$markdown_it$lib$rules_core$block\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\n\\nmodule.exports = function block(state) {\\n  var token;\\n\\n  if (state.inlineMode) {\\n    token          = new state.Token('inline', '', 0);\\n    token.content  = state.src;\\n    token.map      = [ 0, 1 ];\\n    token.children = [];\\n    state.tokens.push(token);\\n  } else {\\n    state.md.block.parse(state.src, state.md, state.env, state.tokens);\\n  }\\n};\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"module.exports\",\"state\",\"inlineMode\",\"token\",\"Token\",\"content\",\"src\",\"map\",\"children\",\"tokens\",\"push\",\"md\",\"block\",\"parse\",\"env\"]\n}\n"]
["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/markdown-it/lib/rules_inline/escape.js"],"~:js","shadow$provide.module$node_modules$markdown_it$lib$rules_inline$escape=function(global,require,module,exports){var isSpace=require(\"module$node_modules$markdown_it$lib$common$utils\").isSpace,ESCAPED=[];for(global=0;256>global;global++)ESCAPED.push(0);\"\\\\!\\\"#$%\\x26'()*+,./:;\\x3c\\x3d\\x3e?@[]^_`{|}~-\".split(\"\").forEach(function(ch){ESCAPED[ch.charCodeAt(0)]=1});module.exports=function(state,silent){var pos=state.pos,max=state.posMax;if(92!==state.src.charCodeAt(pos))return!1;pos++;if(pos<max){var ch=\nstate.src.charCodeAt(pos);if(256>ch&&0!==ESCAPED[ch])return silent||(state.pending+=state.src[pos]),state.pos+=2,!0;if(10===ch){silent||state.push(\"hardbreak\",\"br\",0);for(pos++;pos<max;){ch=state.src.charCodeAt(pos);if(!isSpace(ch))break;pos++}state.pos=pos;return!0}}silent||(state.pending+=\"\\\\\");state.pos++;return!0}}","~:source","shadow$provide[\"module$node_modules$markdown_it$lib$rules_inline$escape\"] = function(global,require,module,exports) {\n// Process escaped chars and hardbreaks\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\nvar ESCAPED = [];\n\nfor (var i = 0; i < 256; i++) { ESCAPED.push(0); }\n\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'\n  .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1; });\n\n\nmodule.exports = function escape(state, silent) {\n  var ch, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x5C/* \\ */) { return false; }\n\n  pos++;\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch < 256 && ESCAPED[ch] !== 0) {\n      if (!silent) { state.pending += state.src[pos]; }\n      state.pos += 2;\n      return true;\n    }\n\n    if (ch === 0x0A) {\n      if (!silent) {\n        state.push('hardbreak', 'br', 0);\n      }\n\n      pos++;\n      // skip leading whitespaces from next line\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n        if (!isSpace(ch)) { break; }\n        pos++;\n      }\n\n      state.pos = pos;\n      return true;\n    }\n  }\n\n  if (!silent) { state.pending += '\\\\'; }\n  state.pos++;\n  return true;\n};\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$markdown_it$lib$common$utils"]],"~:properties",["^5",["pos","pending"]],"~:compiled-at",1591107371175,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$markdown_it$lib$rules_inline$escape.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,wDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAKpH,IAAIC,QAAUH,OAAA,CAAQ,kDAAR,CAAAG,QAAd,CAEIC,QAAU,EAEd,KAASC,MAAT,CAAa,CAAb,CAAoB,GAApB,CAAgBA,MAAhB,CAAyBA,MAAA,EAAzB,CAAgCD,OAAAE,KAAA,CAAa,CAAb,CAEhC,iDAAA,MAAA,CAAA,EAAA,CAAAC,QAAA,CACqB,QAAS,CAACC,EAAD,CAAK,CAAEJ,OAAA,CAAQI,EAAAC,WAAA,CAAc,CAAd,CAAR,CAAA,CAA4B,CAA9B,CADnC,CAIAR,OAAAC,QAAA,CAAiBQ,QAAe,CAACC,KAAD,CAAQC,MAAR,CAAgB,CAAA,IACtCC,IAAMF,KAAAE,IADgC,CACrBC,IAAMH,KAAAI,OAE/B,IAAkC,EAAlC,GAAIJ,KAAAK,IAAAP,WAAA,CAAqBI,GAArB,CAAJ,CAAiD,MAAO,CAAA,CAExDA,IAAA,EAEA,IAAIA,GAAJ,CAAUC,GAAV,CAAe,CACb,IAAAN;AAAKG,KAAAK,IAAAP,WAAA,CAAqBI,GAArB,CAEL,IAAS,GAAT,CAAIL,EAAJ,EAAgC,CAAhC,GAAgBJ,OAAA,CAAQI,EAAR,CAAhB,CAGE,MAFKI,OAEE,GAFQD,KAAAM,QAER,EAFyBN,KAAAK,IAAA,CAAUH,GAAV,CAEzB,EADPF,KAAAE,IACO,EADM,CACN,CAAA,CAAA,CAGT,IAAW,EAAX,GAAIL,EAAJ,CAAiB,CACVI,MAAL,EACED,KAAAL,KAAA,CAAW,WAAX,CAAwB,IAAxB,CAA8B,CAA9B,CAKF,KAFAO,GAAA,EAEA,CAAOA,GAAP,CAAaC,GAAb,CAAA,CAAkB,CAChBN,EAAA,CAAKG,KAAAK,IAAAP,WAAA,CAAqBI,GAArB,CACL,IAAI,CAACV,OAAA,CAAQK,EAAR,CAAL,CAAoB,KACpBK,IAAA,EAHgB,CAMlBF,KAAAE,IAAA,CAAYA,GACZ,OAAO,CAAA,CAdQ,CATJ,CA2BVD,MAAL,GAAeD,KAAAM,QAAf,EAAgC,IAAhC,CACAN,MAAAE,IAAA,EACA,OAAO,CAAA,CApCuC,CAfoE;\",\n\"sources\":[\"node_modules/markdown-it/lib/rules_inline/escape.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$markdown_it$lib$rules_inline$escape\\\"] = function(global,require,module,exports) {\\n// Process escaped chars and hardbreaks\\n\\n'use strict';\\n\\nvar isSpace = require('../common/utils').isSpace;\\n\\nvar ESCAPED = [];\\n\\nfor (var i = 0; i < 256; i++) { ESCAPED.push(0); }\\n\\n'\\\\\\\\!\\\"#$%&\\\\'()*+,./:;<=>?@[]^_`{|}~-'\\n  .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1; });\\n\\n\\nmodule.exports = function escape(state, silent) {\\n  var ch, pos = state.pos, max = state.posMax;\\n\\n  if (state.src.charCodeAt(pos) !== 0x5C/* \\\\ */) { return false; }\\n\\n  pos++;\\n\\n  if (pos < max) {\\n    ch = state.src.charCodeAt(pos);\\n\\n    if (ch < 256 && ESCAPED[ch] !== 0) {\\n      if (!silent) { state.pending += state.src[pos]; }\\n      state.pos += 2;\\n      return true;\\n    }\\n\\n    if (ch === 0x0A) {\\n      if (!silent) {\\n        state.push('hardbreak', 'br', 0);\\n      }\\n\\n      pos++;\\n      // skip leading whitespaces from next line\\n      while (pos < max) {\\n        ch = state.src.charCodeAt(pos);\\n        if (!isSpace(ch)) { break; }\\n        pos++;\\n      }\\n\\n      state.pos = pos;\\n      return true;\\n    }\\n  }\\n\\n  if (!silent) { state.pending += '\\\\\\\\'; }\\n  state.pos++;\\n  return true;\\n};\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"isSpace\",\"ESCAPED\",\"i\",\"push\",\"forEach\",\"ch\",\"charCodeAt\",\"module.exports\",\"state\",\"silent\",\"pos\",\"max\",\"posMax\",\"src\",\"pending\"]\n}\n"]